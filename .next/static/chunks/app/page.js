/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fzhaojiale%2FLibrary%2FContainers%2Fcom.tencent.xinWeChat%2FData%2FLibrary%2FApplication%20Support%2Fcom.tencent.xinWeChat%2F2.0b4.0.9%2Fb065ac55dfa93c168bb482c8fdccd19e%2FMessage%2FMessageTemp%2F3cfd51035ae532f90f7e60bef55f8b76%2FFile%2Fdouyin-manage%2Fsrc%2Fapp%2Fpage.tsx&server=false!":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fzhaojiale%2FLibrary%2FContainers%2Fcom.tencent.xinWeChat%2FData%2FLibrary%2FApplication%20Support%2Fcom.tencent.xinWeChat%2F2.0b4.0.9%2Fb065ac55dfa93c168bb482c8fdccd19e%2FMessage%2FMessageTemp%2F3cfd51035ae532f90f7e60bef55f8b76%2FFile%2Fdouyin-manage%2Fsrc%2Fapp%2Fpage.tsx&server=false! ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/page.tsx */ \"(app-pages-browser)/./src/app/page.tsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lMkZVc2VycyUyRnpoYW9qaWFsZSUyRkxpYnJhcnklMkZDb250YWluZXJzJTJGY29tLnRlbmNlbnQueGluV2VDaGF0JTJGRGF0YSUyRkxpYnJhcnklMkZBcHBsaWNhdGlvbiUyMFN1cHBvcnQlMkZjb20udGVuY2VudC54aW5XZUNoYXQlMkYyLjBiNC4wLjklMkZiMDY1YWM1NWRmYTkzYzE2OGJiNDgyYzhmZGNjZDE5ZSUyRk1lc3NhZ2UlMkZNZXNzYWdlVGVtcCUyRjNjZmQ1MTAzNWFlNTMyZjkwZjdlNjBiZWY1NWY4Yjc2JTJGRmlsZSUyRmRvdXlpbi1tYW5hZ2UlMkZzcmMlMkZhcHAlMkZwYWdlLnRzeCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/YWQwZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy96aGFvamlhbGUvTGlicmFyeS9Db250YWluZXJzL2NvbS50ZW5jZW50LnhpbldlQ2hhdC9EYXRhL0xpYnJhcnkvQXBwbGljYXRpb24gU3VwcG9ydC9jb20udGVuY2VudC54aW5XZUNoYXQvMi4wYjQuMC45L2IwNjVhYzU1ZGZhOTNjMTY4YmI0ODJjOGZkY2NkMTllL01lc3NhZ2UvTWVzc2FnZVRlbXAvM2NmZDUxMDM1YWU1MzJmOTBmN2U2MGJlZjU1ZjhiNzYvRmlsZS9kb3V5aW4tbWFuYWdlL3NyYy9hcHAvcGFnZS50c3hcIikiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fzhaojiale%2FLibrary%2FContainers%2Fcom.tencent.xinWeChat%2FData%2FLibrary%2FApplication%20Support%2Fcom.tencent.xinWeChat%2F2.0b4.0.9%2Fb065ac55dfa93c168bb482c8fdccd19e%2FMessage%2FMessageTemp%2F3cfd51035ae532f90f7e60bef55f8b76%2FFile%2Fdouyin-manage%2Fsrc%2Fapp%2Fpage.tsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ JsonEditor; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_json_editor_ajrm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-json-editor-ajrm */ \"(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/index.js\");\n/* harmony import */ var react_json_editor_ajrm_locale_en__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-json-editor-ajrm/locale/en */ \"(app-pages-browser)/./node_modules/react-json-editor-ajrm/locale/en.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\nfunction JsonEditor() {\n    _s();\n    function getData() {\n        fetch(\"/api/videos\", {\n            method: \"GET\",\n            cache: \"no-cache\"\n        }).then((res)=>{\n            return res.json();\n        }).then((res)=>{\n            setJson(res.data);\n        });\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        getData();\n    }, []);\n    const [json, setJson] = react__WEBPACK_IMPORTED_MODULE_1___default().useState({});\n    function handleEdit(data) {\n        // 更新JSON数据\n        setJson(data.jsObject);\n        fetch(\"/api/videos\", {\n            method: \"POST\",\n            cache: \"no-cache\",\n            body: JSON.stringify(data.jsObject)\n        });\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_json_editor_ajrm__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n            id: \"a_unique_id\",\n            placeholder: json,\n            locale: react_json_editor_ajrm_locale_en__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n            height: \"100vh\",\n            width: \"100vw\",\n            onChange: handleEdit\n        }, void 0, false, {\n            fileName: \"/Users/zhaojiale/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/b065ac55dfa93c168bb482c8fdccd19e/Message/MessageTemp/3cfd51035ae532f90f7e60bef55f8b76/File/douyin-manage/src/app/page.tsx\",\n            lineNumber: 27,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/zhaojiale/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/b065ac55dfa93c168bb482c8fdccd19e/Message/MessageTemp/3cfd51035ae532f90f7e60bef55f8b76/File/douyin-manage/src/app/page.tsx\",\n        lineNumber: 26,\n        columnNumber: 5\n    }, this);\n}\n_s(JsonEditor, \"AfygHUmuHcnGOyHvft/hflzpajQ=\");\n_c = JsonEditor;\nvar _c;\n$RefreshReg$(_c, \"JsonEditor\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvcGFnZS50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDeUM7QUFDTTtBQUNVO0FBRTFDLFNBQVNJOztJQUV0QixTQUFTQztRQUNQQyxNQUFPLGVBQWM7WUFBRUMsUUFBUTtZQUFPQyxPQUFPO1FBQVcsR0FBR0MsSUFBSSxDQUFDQyxDQUFBQTtZQUFTLE9BQU9BLElBQUlDLElBQUk7UUFBRyxHQUFHRixJQUFJLENBQUNDLENBQUFBO1lBQ2pHRSxRQUFRRixJQUFJRyxJQUFJO1FBQ2xCO0lBQ0Y7SUFFQVosZ0RBQVNBLENBQUM7UUFDUkk7SUFDRixHQUFHLEVBQUU7SUFDTCxNQUFNLENBQUNNLE1BQU1DLFFBQVEsR0FBR1oscURBQWMsQ0FBQyxDQUFDO0lBRXhDLFNBQVNlLFdBQVlGLElBQUk7UUFDdkIsV0FBVztRQUNYRCxRQUFRQyxLQUFLRyxRQUFRO1FBQ3JCVixNQUFPLGVBQWM7WUFBRUMsUUFBUTtZQUFRQyxPQUFPO1lBQVlTLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQ04sS0FBS0csUUFBUTtRQUFFO0lBQ2hHO0lBRUEscUJBQ0UsOERBQUNJO2tCQUNDLDRFQUFDbEIsOERBQVNBO1lBQ1JtQixJQUFjO1lBQ2RDLGFBQWdCWDtZQUNoQlIsUUFBZ0JBLHdFQUFNQTtZQUN0Qm9CLFFBQWM7WUFDZEMsT0FBYztZQUNkQyxVQUFVVjs7Ozs7Ozs7Ozs7QUFJbEI7R0EvQndCWDtLQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvYXBwL3BhZ2UudHN4P2Y2OGEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IEpTT05JbnB1dCBmcm9tICdyZWFjdC1qc29uLWVkaXRvci1hanJtJztcbmltcG9ydCBsb2NhbGUgICAgZnJvbSAncmVhY3QtanNvbi1lZGl0b3ItYWpybS9sb2NhbGUvZW4nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBKc29uRWRpdG9yICgpIHtcblxuICBmdW5jdGlvbiBnZXREYXRhICgpIHtcbiAgICBmZXRjaChgL2FwaS92aWRlb3NgLCB7IG1ldGhvZDogJ0dFVCcsIGNhY2hlOiBcIm5vLWNhY2hlXCIgfSkudGhlbihyZXMgPT4geyByZXR1cm4gcmVzLmpzb24oKSB9KS50aGVuKHJlcyA9PiB7XG4gICAgICBzZXRKc29uKHJlcy5kYXRhKVxuICAgIH0pXG4gIH1cblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGdldERhdGEoKVxuICB9LCBbXSlcbiAgY29uc3QgW2pzb24sIHNldEpzb25dID0gUmVhY3QudXNlU3RhdGUoe30pO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUVkaXQgKGRhdGEpIHtcbiAgICAvLyDmm7TmlrBKU09O5pWw5o2uXG4gICAgc2V0SnNvbihkYXRhLmpzT2JqZWN0KTtcbiAgICBmZXRjaChgL2FwaS92aWRlb3NgLCB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogXCJuby1jYWNoZVwiLCBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhLmpzT2JqZWN0KSB9KVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPEpTT05JbnB1dFxuICAgICAgICBpZCAgICAgICAgICA9ICdhX3VuaXF1ZV9pZCdcbiAgICAgICAgcGxhY2Vob2xkZXIgPSB7IGpzb24gfVxuICAgICAgICBsb2NhbGUgICAgICA9IHsgbG9jYWxlIH1cbiAgICAgICAgaGVpZ2h0ICAgICAgPSAnMTAwdmgnXG4gICAgICAgIHdpZHRoICAgICAgID0gJzEwMHZ3J1xuICAgICAgICBvbkNoYW5nZT17aGFuZGxlRWRpdH1cbiAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlRWZmZWN0IiwiSlNPTklucHV0IiwibG9jYWxlIiwiSnNvbkVkaXRvciIsImdldERhdGEiLCJmZXRjaCIsIm1ldGhvZCIsImNhY2hlIiwidGhlbiIsInJlcyIsImpzb24iLCJzZXRKc29uIiwiZGF0YSIsInVzZVN0YXRlIiwiaGFuZGxlRWRpdCIsImpzT2JqZWN0IiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkaXYiLCJpZCIsInBsYWNlaG9sZGVyIiwiaGVpZ2h0Iiwid2lkdGgiLCJvbkNoYW5nZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      case REACT_SERVER_CONTEXT_TYPE:\n        {\n          var context2 = type;\n          return (context2.displayName || context2._globalName) + '.Provider';\n        }\n\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe[prop-missing]\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      } // TODO(luna): This will currently only throw if the function component\n      // tries to access React/ReactDOM/props. We should probably make this throw\n      // in simple components too\n\n\n      var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n      // component, which we don't yet support. Attach a noop catch handler to\n      // silence the error.\n      // TODO: Implement component stacks for async client components?\n\n      if (maybePromise && typeof maybePromise.catch === 'function') {\n        maybePromise.catch(function () {});\n      }\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement$1(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement$1(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement$1(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement$1(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar didWarnAboutKeySpread = {};\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (hasOwnProperty.call(props, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(props).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV = jsxWithValidation ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/OGYyZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/err.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-json-editor-ajrm/es/err.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _mitsuketa__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mitsuketa */ \"(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/mitsuketa/index.js\");\n/* harmony import */ var _mitsuketa__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_mitsuketa__WEBPACK_IMPORTED_MODULE_0__);\n\nconst err = {\n  getCaller: (skip = 1) => {\n    // A somewhat hacky solution that will yield different results in different JS engines. \n    // Since we only call this function when an error will actually be thrown we typically don't \n    // rally mind the performance impact this might have if called too often.\n    // Lucky for us we use nodeJS and thus only V8.\n    const stackTrace = new Error().stack;\n    var callerName = stackTrace.replace(/^Error\\s+/, '');\n    callerName = callerName.split(\"\\n\")[skip];\n    callerName = callerName.replace(/^\\s+at Object./, '').replace(/^\\s+at /, '').replace(/ \\(.+\\)$/, '');\n    return callerName;\n  },\n  throwError: (fxName = 'unknown function', paramName = 'unknown parameter', expectation = 'to be defined') => {\n    throw ['@', fxName, '(): Expected parameter \\'', paramName, '\\' ', expectation].join('');\n  },\n  isUndefined: (paramName = '<unknown parameter>', param) => {\n    if ([null, undefined].indexOf(param) > -1) err.throwError(err.getCaller(2), paramName);\n  },\n  isFalsy: (paramName = '<unknown parameter>', param) => {\n    if (!param) err.throwError(err.getCaller(2), paramName);\n  },\n  isNoneOf: (paramName = '<unknown parameter>', param, contains = []) => {\n    if (contains.indexOf(param) === -1) err.throwError(err.getCaller(2), paramName, 'to be any of' + JSON.stringify(contains));\n  },\n  isAnyOf: (paramName = '<unknown parameter>', param, contains = []) => {\n    if (contains.indexOf(param) > -1) err.throwError(err.getCaller(2), paramName, 'not to be any of' + JSON.stringify(contains));\n  },\n  isNotType: (paramName = '<unknown parameter>', param, type = '') => {\n    if ((0,_mitsuketa__WEBPACK_IMPORTED_MODULE_0__.getType)(param) !== type.toLowerCase()) err.throwError(err.getCaller(2), paramName, 'to be type ' + type.toLowerCase());\n  },\n  isAnyTypeOf: (paramName = '<unknown parameter>', param, types = []) => {\n    types.forEach(type => {\n      if ((0,_mitsuketa__WEBPACK_IMPORTED_MODULE_0__.getType)(param) === type) err.throwError(err.getCaller(2), paramName, 'not to be type of ' + type.toLowerCase());\n    });\n  },\n  missingKey: (paramName = '<unknown parameter>', param, keyName = '') => {\n    err.isUndefined(paramName, param);\n    if (Object.keys(param).indexOf(keyName) === -1) err.throwError(err.getCaller(2), paramName, 'to contain \\'' + keyName + '\\' key');\n  },\n  missingAnyKeys: (paramName = '<unknown parameter>', param, keyNames = ['']) => {\n    err.isUndefined(paramName, param);\n    const keyList = Object.keys(param);\n    keyNames.forEach(keyName => {\n      if (keyList.indexOf(keyName) === -1) err.throwError(err.getCaller(2), paramName, 'to contain \\'' + keyName + '\\' key');\n    });\n  },\n  containsUndefined: (paramName = '<unknown parameter>', param) => {\n    [undefined, null].forEach(value => {\n      const location = (0,_mitsuketa__WEBPACK_IMPORTED_MODULE_0__.locate)(param, value);\n      if (location) err.throwError(err.getCaller(2), paramName, 'not to contain \\'' + JSON.stringify(value) + '\\' at ' + location);\n    });\n  },\n  isInvalidPath: (paramName = '<unknown parameter>', param) => {\n    err.isUndefined(paramName, param);\n    err.isNotType(paramName, param, 'string');\n    err.isAnyOf(paramName, param, ['', '/']);\n    '.$[]#'.split().forEach(invalidChar => {\n      if (param.indexOf(invalidChar) > -1) err.throwError(err.getCaller(2), paramName, 'not to contain invalid character \\'' + invalidChar + '\\'');\n    });\n    if (param.match(/\\/{2,}/g)) err.throwError(err.getCaller(2), paramName, 'not to contain consecutive forward slash characters');\n  },\n  isInvalidWriteData: (paramName = '<unknown parameter>', param) => {\n    err.isUndefined(paramName, param);\n    err.containsUndefined(paramName, param);\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (err);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1qc29uLWVkaXRvci1hanJtL2VzL2Vyci5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxRQUFRLG1EQUFPO0FBQ2YsR0FBRztBQUNIO0FBQ0E7QUFDQSxVQUFVLG1EQUFPO0FBQ2pCLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQSx1QkFBdUIsa0RBQU07QUFDN0I7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCx3QkFBd0IsR0FBRztBQUMzQixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUFlLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWpzb24tZWRpdG9yLWFqcm0vZXMvZXJyLmpzP2M3NWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0VHlwZSwgbG9jYXRlIH0gZnJvbSAnLi9taXRzdWtldGEnO1xuY29uc3QgZXJyID0ge1xuICBnZXRDYWxsZXI6IChza2lwID0gMSkgPT4ge1xuICAgIC8vIEEgc29tZXdoYXQgaGFja3kgc29sdXRpb24gdGhhdCB3aWxsIHlpZWxkIGRpZmZlcmVudCByZXN1bHRzIGluIGRpZmZlcmVudCBKUyBlbmdpbmVzLiBcbiAgICAvLyBTaW5jZSB3ZSBvbmx5IGNhbGwgdGhpcyBmdW5jdGlvbiB3aGVuIGFuIGVycm9yIHdpbGwgYWN0dWFsbHkgYmUgdGhyb3duIHdlIHR5cGljYWxseSBkb24ndCBcbiAgICAvLyByYWxseSBtaW5kIHRoZSBwZXJmb3JtYW5jZSBpbXBhY3QgdGhpcyBtaWdodCBoYXZlIGlmIGNhbGxlZCB0b28gb2Z0ZW4uXG4gICAgLy8gTHVja3kgZm9yIHVzIHdlIHVzZSBub2RlSlMgYW5kIHRodXMgb25seSBWOC5cbiAgICBjb25zdCBzdGFja1RyYWNlID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgdmFyIGNhbGxlck5hbWUgPSBzdGFja1RyYWNlLnJlcGxhY2UoL15FcnJvclxccysvLCAnJyk7XG4gICAgY2FsbGVyTmFtZSA9IGNhbGxlck5hbWUuc3BsaXQoXCJcXG5cIilbc2tpcF07XG4gICAgY2FsbGVyTmFtZSA9IGNhbGxlck5hbWUucmVwbGFjZSgvXlxccythdCBPYmplY3QuLywgJycpLnJlcGxhY2UoL15cXHMrYXQgLywgJycpLnJlcGxhY2UoLyBcXCguK1xcKSQvLCAnJyk7XG4gICAgcmV0dXJuIGNhbGxlck5hbWU7XG4gIH0sXG4gIHRocm93RXJyb3I6IChmeE5hbWUgPSAndW5rbm93biBmdW5jdGlvbicsIHBhcmFtTmFtZSA9ICd1bmtub3duIHBhcmFtZXRlcicsIGV4cGVjdGF0aW9uID0gJ3RvIGJlIGRlZmluZWQnKSA9PiB7XG4gICAgdGhyb3cgWydAJywgZnhOYW1lLCAnKCk6IEV4cGVjdGVkIHBhcmFtZXRlciBcXCcnLCBwYXJhbU5hbWUsICdcXCcgJywgZXhwZWN0YXRpb25dLmpvaW4oJycpO1xuICB9LFxuICBpc1VuZGVmaW5lZDogKHBhcmFtTmFtZSA9ICc8dW5rbm93biBwYXJhbWV0ZXI+JywgcGFyYW0pID0+IHtcbiAgICBpZiAoW251bGwsIHVuZGVmaW5lZF0uaW5kZXhPZihwYXJhbSkgPiAtMSkgZXJyLnRocm93RXJyb3IoZXJyLmdldENhbGxlcigyKSwgcGFyYW1OYW1lKTtcbiAgfSxcbiAgaXNGYWxzeTogKHBhcmFtTmFtZSA9ICc8dW5rbm93biBwYXJhbWV0ZXI+JywgcGFyYW0pID0+IHtcbiAgICBpZiAoIXBhcmFtKSBlcnIudGhyb3dFcnJvcihlcnIuZ2V0Q2FsbGVyKDIpLCBwYXJhbU5hbWUpO1xuICB9LFxuICBpc05vbmVPZjogKHBhcmFtTmFtZSA9ICc8dW5rbm93biBwYXJhbWV0ZXI+JywgcGFyYW0sIGNvbnRhaW5zID0gW10pID0+IHtcbiAgICBpZiAoY29udGFpbnMuaW5kZXhPZihwYXJhbSkgPT09IC0xKSBlcnIudGhyb3dFcnJvcihlcnIuZ2V0Q2FsbGVyKDIpLCBwYXJhbU5hbWUsICd0byBiZSBhbnkgb2YnICsgSlNPTi5zdHJpbmdpZnkoY29udGFpbnMpKTtcbiAgfSxcbiAgaXNBbnlPZjogKHBhcmFtTmFtZSA9ICc8dW5rbm93biBwYXJhbWV0ZXI+JywgcGFyYW0sIGNvbnRhaW5zID0gW10pID0+IHtcbiAgICBpZiAoY29udGFpbnMuaW5kZXhPZihwYXJhbSkgPiAtMSkgZXJyLnRocm93RXJyb3IoZXJyLmdldENhbGxlcigyKSwgcGFyYW1OYW1lLCAnbm90IHRvIGJlIGFueSBvZicgKyBKU09OLnN0cmluZ2lmeShjb250YWlucykpO1xuICB9LFxuICBpc05vdFR5cGU6IChwYXJhbU5hbWUgPSAnPHVua25vd24gcGFyYW1ldGVyPicsIHBhcmFtLCB0eXBlID0gJycpID0+IHtcbiAgICBpZiAoZ2V0VHlwZShwYXJhbSkgIT09IHR5cGUudG9Mb3dlckNhc2UoKSkgZXJyLnRocm93RXJyb3IoZXJyLmdldENhbGxlcigyKSwgcGFyYW1OYW1lLCAndG8gYmUgdHlwZSAnICsgdHlwZS50b0xvd2VyQ2FzZSgpKTtcbiAgfSxcbiAgaXNBbnlUeXBlT2Y6IChwYXJhbU5hbWUgPSAnPHVua25vd24gcGFyYW1ldGVyPicsIHBhcmFtLCB0eXBlcyA9IFtdKSA9PiB7XG4gICAgdHlwZXMuZm9yRWFjaCh0eXBlID0+IHtcbiAgICAgIGlmIChnZXRUeXBlKHBhcmFtKSA9PT0gdHlwZSkgZXJyLnRocm93RXJyb3IoZXJyLmdldENhbGxlcigyKSwgcGFyYW1OYW1lLCAnbm90IHRvIGJlIHR5cGUgb2YgJyArIHR5cGUudG9Mb3dlckNhc2UoKSk7XG4gICAgfSk7XG4gIH0sXG4gIG1pc3NpbmdLZXk6IChwYXJhbU5hbWUgPSAnPHVua25vd24gcGFyYW1ldGVyPicsIHBhcmFtLCBrZXlOYW1lID0gJycpID0+IHtcbiAgICBlcnIuaXNVbmRlZmluZWQocGFyYW1OYW1lLCBwYXJhbSk7XG4gICAgaWYgKE9iamVjdC5rZXlzKHBhcmFtKS5pbmRleE9mKGtleU5hbWUpID09PSAtMSkgZXJyLnRocm93RXJyb3IoZXJyLmdldENhbGxlcigyKSwgcGFyYW1OYW1lLCAndG8gY29udGFpbiBcXCcnICsga2V5TmFtZSArICdcXCcga2V5Jyk7XG4gIH0sXG4gIG1pc3NpbmdBbnlLZXlzOiAocGFyYW1OYW1lID0gJzx1bmtub3duIHBhcmFtZXRlcj4nLCBwYXJhbSwga2V5TmFtZXMgPSBbJyddKSA9PiB7XG4gICAgZXJyLmlzVW5kZWZpbmVkKHBhcmFtTmFtZSwgcGFyYW0pO1xuICAgIGNvbnN0IGtleUxpc3QgPSBPYmplY3Qua2V5cyhwYXJhbSk7XG4gICAga2V5TmFtZXMuZm9yRWFjaChrZXlOYW1lID0+IHtcbiAgICAgIGlmIChrZXlMaXN0LmluZGV4T2Yoa2V5TmFtZSkgPT09IC0xKSBlcnIudGhyb3dFcnJvcihlcnIuZ2V0Q2FsbGVyKDIpLCBwYXJhbU5hbWUsICd0byBjb250YWluIFxcJycgKyBrZXlOYW1lICsgJ1xcJyBrZXknKTtcbiAgICB9KTtcbiAgfSxcbiAgY29udGFpbnNVbmRlZmluZWQ6IChwYXJhbU5hbWUgPSAnPHVua25vd24gcGFyYW1ldGVyPicsIHBhcmFtKSA9PiB7XG4gICAgW3VuZGVmaW5lZCwgbnVsbF0uZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICBjb25zdCBsb2NhdGlvbiA9IGxvY2F0ZShwYXJhbSwgdmFsdWUpO1xuICAgICAgaWYgKGxvY2F0aW9uKSBlcnIudGhyb3dFcnJvcihlcnIuZ2V0Q2FsbGVyKDIpLCBwYXJhbU5hbWUsICdub3QgdG8gY29udGFpbiBcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ1xcJyBhdCAnICsgbG9jYXRpb24pO1xuICAgIH0pO1xuICB9LFxuICBpc0ludmFsaWRQYXRoOiAocGFyYW1OYW1lID0gJzx1bmtub3duIHBhcmFtZXRlcj4nLCBwYXJhbSkgPT4ge1xuICAgIGVyci5pc1VuZGVmaW5lZChwYXJhbU5hbWUsIHBhcmFtKTtcbiAgICBlcnIuaXNOb3RUeXBlKHBhcmFtTmFtZSwgcGFyYW0sICdzdHJpbmcnKTtcbiAgICBlcnIuaXNBbnlPZihwYXJhbU5hbWUsIHBhcmFtLCBbJycsICcvJ10pO1xuICAgICcuJFtdIycuc3BsaXQoKS5mb3JFYWNoKGludmFsaWRDaGFyID0+IHtcbiAgICAgIGlmIChwYXJhbS5pbmRleE9mKGludmFsaWRDaGFyKSA+IC0xKSBlcnIudGhyb3dFcnJvcihlcnIuZ2V0Q2FsbGVyKDIpLCBwYXJhbU5hbWUsICdub3QgdG8gY29udGFpbiBpbnZhbGlkIGNoYXJhY3RlciBcXCcnICsgaW52YWxpZENoYXIgKyAnXFwnJyk7XG4gICAgfSk7XG4gICAgaWYgKHBhcmFtLm1hdGNoKC9cXC97Mix9L2cpKSBlcnIudGhyb3dFcnJvcihlcnIuZ2V0Q2FsbGVyKDIpLCBwYXJhbU5hbWUsICdub3QgdG8gY29udGFpbiBjb25zZWN1dGl2ZSBmb3J3YXJkIHNsYXNoIGNoYXJhY3RlcnMnKTtcbiAgfSxcbiAgaXNJbnZhbGlkV3JpdGVEYXRhOiAocGFyYW1OYW1lID0gJzx1bmtub3duIHBhcmFtZXRlcj4nLCBwYXJhbSkgPT4ge1xuICAgIGVyci5pc1VuZGVmaW5lZChwYXJhbU5hbWUsIHBhcmFtKTtcbiAgICBlcnIuY29udGFpbnNVbmRlZmluZWQocGFyYW1OYW1lLCBwYXJhbSk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBlcnI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/err.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-json-editor-ajrm/es/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectSpread */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/objectSpread.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _themes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./themes */ \"(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/themes.js\");\n/* harmony import */ var _mitsuketa__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mitsuketa */ \"(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/mitsuketa/index.js\");\n/* harmony import */ var _mitsuketa__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_mitsuketa__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _err__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./err */ \"(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/err.js\");\n/* harmony import */ var _locale__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./locale */ \"(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/locale/index.js\");\n/* harmony import */ var _locale_en__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./locale/en */ \"(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/locale/en.js\");\n/** @license react-json-editor-ajrm v2.5.14\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n\nclass JSONInput extends react__WEBPACK_IMPORTED_MODULE_1__.Component {\n  constructor(props) {\n    super(props);\n    this.updateInternalProps = this.updateInternalProps.bind(this);\n    this.createMarkup = this.createMarkup.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    this.update = this.update.bind(this);\n    this.getCursorPosition = this.getCursorPosition.bind(this);\n    this.setCursorPosition = this.setCursorPosition.bind(this);\n    this.scheduledUpdate = this.scheduledUpdate.bind(this);\n    this.setUpdateTime = this.setUpdateTime.bind(this);\n    this.renderLabels = this.renderLabels.bind(this);\n    this.newSpan = this.newSpan.bind(this);\n    this.renderErrorMessage = this.renderErrorMessage.bind(this);\n    this.onScroll = this.onScroll.bind(this);\n    this.showPlaceholder = this.showPlaceholder.bind(this);\n    this.tokenize = this.tokenize.bind(this);\n    this.onKeyPress = this.onKeyPress.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.onPaste = this.onPaste.bind(this);\n    this.stopEvent = this.stopEvent.bind(this);\n    this.refContent = null;\n    this.refLabels = null;\n    this.updateInternalProps();\n    this.renderCount = 1;\n    this.state = {\n      prevPlaceholder: '',\n      markupText: '',\n      plainText: '',\n      json: '',\n      jsObject: undefined,\n      lines: false,\n      error: false\n    };\n\n    if (!this.props.locale) {\n      console.warn(\"[react-json-editor-ajrm - Deprecation Warning] You did not provide a 'locale' prop for your JSON input - This will be required in a future version. English has been set as a default.\");\n    }\n  }\n\n  updateInternalProps() {\n    let colors = {},\n        style = {},\n        theme = _themes__WEBPACK_IMPORTED_MODULE_2__[\"default\"].dark_vscode_tribute;\n    if ('theme' in this.props) if (typeof this.props.theme === 'string') if (this.props.theme in _themes__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) theme = _themes__WEBPACK_IMPORTED_MODULE_2__[\"default\"][this.props.theme];\n    colors = theme;\n    if ('colors' in this.props) colors = {\n      default: 'default' in this.props.colors ? this.props.colors.default : colors.default,\n      string: 'string' in this.props.colors ? this.props.colors.string : colors.string,\n      number: 'number' in this.props.colors ? this.props.colors.number : colors.number,\n      colon: 'colon' in this.props.colors ? this.props.colors.colon : colors.colon,\n      keys: 'keys' in this.props.colors ? this.props.colors.keys : colors.keys,\n      keys_whiteSpace: 'keys_whiteSpace' in this.props.colors ? this.props.colors.keys_whiteSpace : colors.keys_whiteSpace,\n      primitive: 'primitive' in this.props.colors ? this.props.colors.primitive : colors.primitive,\n      error: 'error' in this.props.colors ? this.props.colors.error : colors.error,\n      background: 'background' in this.props.colors ? this.props.colors.background : colors.background,\n      background_warning: 'background_warning' in this.props.colors ? this.props.colors.background_warning : colors.background_warning\n    };\n    this.colors = colors;\n    if ('style' in this.props) style = {\n      outerBox: 'outerBox' in this.props.style ? this.props.style.outerBox : {},\n      container: 'container' in this.props.style ? this.props.style.container : {},\n      warningBox: 'warningBox' in this.props.style ? this.props.style.warningBox : {},\n      errorMessage: 'errorMessage' in this.props.style ? this.props.style.errorMessage : {},\n      body: 'body' in this.props.style ? this.props.style.body : {},\n      labelColumn: 'labelColumn' in this.props.style ? this.props.style.labelColumn : {},\n      labels: 'labels' in this.props.style ? this.props.style.labels : {},\n      contentBox: 'contentBox' in this.props.style ? this.props.style.contentBox : {}\n    };else style = {\n      outerBox: {},\n      container: {},\n      warningBox: {},\n      errorMessage: {},\n      body: {},\n      labelColumn: {},\n      labels: {},\n      contentBox: {}\n    };\n    this.style = style;\n    this.confirmGood = 'confirmGood' in this.props ? this.props.confirmGood : true;\n    const totalHeight = this.props.height || '610px',\n          totalWidth = this.props.width || '479px';\n    this.totalHeight = totalHeight;\n    this.totalWidth = totalWidth;\n\n    if (!('onKeyPressUpdate' in this.props) || this.props.onKeyPressUpdate) {\n      if (!this.timer) this.timer = setInterval(this.scheduledUpdate, 100);\n    } else if (this.timer) {\n      clearInterval(this.timer);\n      this.timer = false;\n    }\n\n    this.updateTime = false;\n    this.waitAfterKeyPress = 'waitAfterKeyPress' in this.props ? this.props.waitAfterKeyPress : 1000;\n    this.resetConfiguration = 'reset' in this.props ? this.props.reset : false;\n  }\n\n  render() {\n    const id = this.props.id,\n          markupText = this.state.markupText,\n          error = this.props.error || this.state.error,\n          colors = this.colors,\n          style = this.style,\n          confirmGood = this.confirmGood,\n          totalHeight = this.totalHeight,\n          totalWidth = this.totalWidth,\n          hasError = !!this.props.error || (error ? 'token' in error : false);\n    this.renderCount++;\n    return react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n      name: \"outer-box\",\n      id: id && id + '-outer-box',\n      style: (0,_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        display: 'block',\n        overflow: 'none',\n        height: totalHeight,\n        width: totalWidth,\n        margin: 0,\n        boxSizing: 'border-box',\n        position: 'relative'\n      }, style.outerBox)\n    }, confirmGood ? react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n      style: {\n        opacity: hasError ? 0 : 1,\n        height: '30px',\n        width: '30px',\n        position: 'absolute',\n        top: 0,\n        right: 0,\n        transform: 'translate(-25%,25%)',\n        pointerEvents: 'none',\n        transitionDuration: '0.2s',\n        transitionTimingFunction: 'cubic-bezier(0, 1, 0.5, 1)'\n      }\n    }, react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"svg\", {\n      height: \"30px\",\n      width: \"30px\",\n      viewBox: \"0 0 100 100\"\n    }, react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"path\", {\n      fillRule: \"evenodd\",\n      clipRule: \"evenodd\",\n      fill: \"green\",\n      opacity: \"0.85\",\n      d: \"M39.363,79L16,55.49l11.347-11.419L39.694,56.49L72.983,23L84,34.085L39.363,79z\"\n    }))) : void 0, react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n      name: \"container\",\n      id: id && id + '-container',\n      style: (0,_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        display: 'block',\n        height: totalHeight,\n        width: totalWidth,\n        margin: 0,\n        boxSizing: 'border-box',\n        overflow: 'hidden',\n        fontFamily: 'Roboto, sans-serif'\n      }, style.container),\n      onClick: this.onClick\n    }, react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n      name: \"warning-box\",\n      id: id && id + '-warning-box',\n      style: (0,_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        display: 'block',\n        overflow: 'hidden',\n        height: hasError ? '60px' : '0px',\n        width: '100%',\n        margin: 0,\n        backgroundColor: colors.background_warning,\n        transitionDuration: '0.2s',\n        transitionTimingFunction: 'cubic-bezier(0, 1, 0.5, 1)'\n      }, style.warningBox),\n      onClick: this.onClick\n    }, react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n      style: {\n        display: 'inline-block',\n        height: '60px',\n        width: '60px',\n        margin: 0,\n        boxSizing: 'border-box',\n        overflow: 'hidden',\n        verticalAlign: 'top',\n        pointerEvents: 'none'\n      },\n      onClick: this.onClick\n    }, react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n      style: {\n        position: 'relative',\n        top: 0,\n        left: 0,\n        height: '60px',\n        width: '60px',\n        margin: 0,\n        pointerEvents: 'none'\n      },\n      onClick: this.onClick\n    }, react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        pointerEvents: 'none'\n      },\n      onClick: this.onClick\n    }, react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"svg\", {\n      height: \"25px\",\n      width: \"25px\",\n      viewBox: \"0 0 100 100\"\n    }, react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"path\", {\n      fillRule: \"evenodd\",\n      clipRule: \"evenodd\",\n      fill: \"red\",\n      d: \"M73.9,5.75c0.467-0.467,1.067-0.7,1.8-0.7c0.7,0,1.283,0.233,1.75,0.7l16.8,16.8  c0.467,0.5,0.7,1.084,0.7,1.75c0,0.733-0.233,1.334-0.7,1.801L70.35,50l23.9,23.95c0.5,0.467,0.75,1.066,0.75,1.8  c0,0.667-0.25,1.25-0.75,1.75l-16.8,16.75c-0.534,0.467-1.117,0.7-1.75,0.7s-1.233-0.233-1.8-0.7L50,70.351L26.1,94.25  c-0.567,0.467-1.167,0.7-1.8,0.7c-0.667,0-1.283-0.233-1.85-0.7L5.75,77.5C5.25,77,5,76.417,5,75.75c0-0.733,0.25-1.333,0.75-1.8  L29.65,50L5.75,26.101C5.25,25.667,5,25.066,5,24.3c0-0.666,0.25-1.25,0.75-1.75l16.8-16.8c0.467-0.467,1.05-0.7,1.75-0.7  c0.733,0,1.333,0.233,1.8,0.7L50,29.65L73.9,5.75z\"\n    }))))), react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n      style: {\n        display: 'inline-block',\n        height: '60px',\n        width: 'calc(100% - 60px)',\n        margin: 0,\n        overflow: 'hidden',\n        verticalAlign: 'top',\n        position: 'absolute',\n        pointerEvents: 'none'\n      },\n      onClick: this.onClick\n    }, this.renderErrorMessage())), react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n      name: \"body\",\n      id: id && id + '-body',\n      style: (0,_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        display: 'flex',\n        overflow: 'none',\n        height: hasError ? 'calc(100% - 60px)' : '100%',\n        width: '',\n        margin: 0,\n        resize: 'none',\n        fontFamily: 'Roboto Mono, Monaco, monospace',\n        fontSize: '11px',\n        backgroundColor: colors.background,\n        transitionDuration: '0.2s',\n        transitionTimingFunction: 'cubic-bezier(0, 1, 0.5, 1)'\n      }, style.body),\n      onClick: this.onClick\n    }, react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n      name: \"labels\",\n      id: id && id + '-labels',\n      ref: ref => this.refLabels = ref,\n      style: (0,_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        display: 'inline-block',\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        height: '100%',\n        width: '44px',\n        margin: 0,\n        padding: '5px 0px 5px 10px',\n        overflow: 'hidden',\n        color: '#D4D4D4'\n      }, style.labelColumn),\n      onClick: this.onClick\n    }, this.renderLabels()), react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n      id: id,\n      ref: ref => this.refContent = ref,\n      contentEditable: true,\n      style: (0,_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        display: 'inline-block',\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        height: '100%',\n        width: '',\n        flex: 1,\n        margin: 0,\n        padding: '5px',\n        overflowX: 'hidden',\n        overflowY: 'auto',\n        wordWrap: 'break-word',\n        whiteSpace: 'pre-line',\n        color: '#D4D4D4',\n        outline: 'none'\n      }, style.contentBox),\n      dangerouslySetInnerHTML: this.createMarkup(markupText),\n      onKeyPress: this.onKeyPress,\n      onKeyDown: this.onKeyDown,\n      onClick: this.onClick,\n      onBlur: this.onBlur,\n      onScroll: this.onScroll,\n      onPaste: this.onPaste,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      autoCapitalize: \"off\",\n      spellCheck: false\n    }))));\n  }\n\n  renderErrorMessage() {\n    const locale = this.props.locale || _locale_en__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n          error = this.props.error || this.state.error,\n          style = this.style;\n    if (!error) return void 0;\n    return react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"p\", {\n      style: (0,_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        color: 'red',\n        fontSize: '12px',\n        position: 'absolute',\n        width: 'calc(100% - 60px)',\n        height: '60px',\n        boxSizing: 'border-box',\n        margin: 0,\n        padding: 0,\n        paddingRight: '10px',\n        overflowWrap: 'break-word',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n      }, style.errorMessage)\n    }, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.format, error));\n  }\n\n  renderLabels() {\n    const colors = this.colors,\n          style = this.style,\n          error = this.props.error || this.state.error,\n          errorLine = error ? error.line : -1,\n          lines = this.state.lines ? this.state.lines : 1;\n    let labels = new Array(lines);\n\n    for (var i = 0; i < lines - 1; i++) labels[i] = i + 1;\n\n    return labels.map(number => {\n      const color = number !== errorLine ? colors.default : 'red';\n      return react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        key: number,\n        style: (0,_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, style.labels, {\n          color: color\n        })\n      }, number);\n    });\n  }\n\n  createMarkup(markupText) {\n    if (markupText === undefined) return {\n      __html: ''\n    };\n    return {\n      __html: '' + markupText\n    };\n  }\n\n  newSpan(i, token, depth) {\n    let colors = this.colors,\n        type = token.type,\n        string = token.string;\n    let color = '';\n\n    switch (type) {\n      case 'string':\n      case 'number':\n      case 'primitive':\n      case 'error':\n        color = colors[token.type];\n        break;\n\n      case 'key':\n        if (string === ' ') color = colors.keys_whiteSpace;else color = colors.keys;\n        break;\n\n      case 'symbol':\n        if (string === ':') color = colors.colon;else color = colors.default;\n        break;\n\n      default:\n        color = colors.default;\n        break;\n    }\n\n    if (string.length !== string.replace(/</g, '').replace(/>/g, '').length) string = '<xmp style=display:inline;>' + string + '</xmp>';\n    return '<span' + ' type=\"' + type + '\"' + ' value=\"' + string + '\"' + ' depth=\"' + depth + '\"' + ' style=\"color:' + color + '\"' + '>' + string + '</span>';\n  }\n\n  getCursorPosition(countBR) {\n    /**\r\n     * Need to deprecate countBR\r\n     * It is used to differenciate between good markup render, and aux render when error found\r\n     * Adjustments based on coundBR account for usage of <br> instead of <span> for linebreaks to determine acurate cursor position\r\n     * Find a way to consolidate render styles\r\n     */\n    const isChildOf = node => {\n      while (node !== null) {\n        if (node === this.refContent) return true;\n        node = node.parentNode;\n      }\n\n      return false;\n    };\n\n    let selection = window.getSelection(),\n        charCount = -1,\n        linebreakCount = 0,\n        node;\n\n    if (selection.focusNode && isChildOf(selection.focusNode)) {\n      node = selection.focusNode;\n      charCount = selection.focusOffset;\n\n      while (node) {\n        if (node === this.refContent) break;\n\n        if (node.previousSibling) {\n          node = node.previousSibling;\n          if (countBR) if (node.nodeName === 'BR') linebreakCount++;\n          charCount += node.textContent.length;\n        } else {\n          node = node.parentNode;\n          if (node === null) break;\n        }\n      }\n    }\n\n    return charCount + linebreakCount;\n  }\n\n  setCursorPosition(nextPosition) {\n    if ([false, null, undefined].indexOf(nextPosition) > -1) return;\n\n    const createRange = (node, chars, range) => {\n      if (!range) {\n        range = document.createRange();\n        range.selectNode(node);\n        range.setStart(node, 0);\n      }\n\n      if (chars.count === 0) {\n        range.setEnd(node, chars.count);\n      } else if (node && chars.count > 0) {\n        if (node.nodeType === Node.TEXT_NODE) {\n          if (node.textContent.length < chars.count) chars.count -= node.textContent.length;else {\n            range.setEnd(node, chars.count);\n            chars.count = 0;\n          }\n        } else for (var lp = 0; lp < node.childNodes.length; lp++) {\n          range = createRange(node.childNodes[lp], chars, range);\n          if (chars.count === 0) break;\n        }\n      }\n\n      return range;\n    };\n\n    const setPosition = chars => {\n      if (chars < 0) return;\n      let selection = window.getSelection(),\n          range = createRange(this.refContent, {\n        count: chars\n      });\n      if (!range) return;\n      range.collapse(false);\n      selection.removeAllRanges();\n      selection.addRange(range);\n    };\n\n    if (nextPosition > 0) setPosition(nextPosition);else this.refContent.focus();\n  }\n\n  update(cursorOffset = 0, updateCursorPosition = true) {\n    const container = this.refContent,\n          data = this.tokenize(container);\n    if ('onChange' in this.props) this.props.onChange({\n      plainText: data.indented,\n      markupText: data.markup,\n      json: data.json,\n      jsObject: data.jsObject,\n      lines: data.lines,\n      error: data.error\n    });\n    let cursorPosition = this.getCursorPosition(data.error) + cursorOffset;\n    this.setState({\n      plainText: data.indented,\n      markupText: data.markup,\n      json: data.json,\n      jsObject: data.jsObject,\n      lines: data.lines,\n      error: data.error\n    });\n    this.updateTime = false;\n    if (updateCursorPosition) this.setCursorPosition(cursorPosition);\n  }\n\n  scheduledUpdate() {\n    if ('onKeyPressUpdate' in this.props) if (this.props.onKeyPressUpdate === false) return;\n    const {\n      updateTime\n    } = this;\n    if (updateTime === false) return;\n    if (updateTime > new Date().getTime()) return;\n    this.update();\n  }\n\n  setUpdateTime() {\n    if ('onKeyPressUpdate' in this.props) if (this.props.onKeyPressUpdate === false) return;\n    this.updateTime = new Date().getTime() + this.waitAfterKeyPress;\n  }\n\n  stopEvent(event) {\n    if (!event) return;\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  onKeyPress(event) {\n    const ctrlOrMetaIsPressed = event.ctrlKey || event.metaKey;\n    if (this.props.viewOnly && !ctrlOrMetaIsPressed) this.stopEvent(event);\n    if (!ctrlOrMetaIsPressed) this.setUpdateTime();\n  }\n\n  onKeyDown(event) {\n    const viewOnly = !!this.props.viewOnly;\n    const ctrlOrMetaIsPressed = event.ctrlKey || event.metaKey;\n\n    switch (event.key) {\n      case 'Tab':\n        this.stopEvent(event);\n        if (viewOnly) break;\n        document.execCommand(\"insertText\", false, \"  \");\n        this.setUpdateTime();\n        break;\n\n      case 'Backspace':\n      case 'Delete':\n        if (viewOnly) this.stopEvent(event);\n        this.setUpdateTime();\n        break;\n\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'ArrowUp':\n      case 'ArrowDown':\n        this.setUpdateTime();\n        break;\n\n      case 'a':\n      case 'c':\n        if (viewOnly && !ctrlOrMetaIsPressed) this.stopEvent(event);\n        break;\n\n      default:\n        if (viewOnly) this.stopEvent(event);\n        break;\n    }\n  }\n\n  onPaste(event) {\n    if (this.props.viewOnly) {\n      this.stopEvent(event);\n    } else {\n      event.preventDefault();\n      var text = event.clipboardData.getData('text/plain');\n      document.execCommand('insertText', false, text);\n    }\n\n    this.update();\n  }\n\n  onClick() {\n    if ('viewOnly' in this.props) if (this.props.viewOnly) return;\n  }\n\n  onBlur() {\n    if ('viewOnly' in this.props) if (this.props.viewOnly) return;\n    const container = this.refContent,\n          data = this.tokenize(container);\n    if ('onBlur' in this.props) this.props.onBlur({\n      plainText: data.indented,\n      markupText: data.markup,\n      json: data.json,\n      jsObject: data.jsObject,\n      lines: data.lines,\n      error: data.error\n    });\n  }\n\n  onScroll(event) {\n    this.refLabels.scrollTop = event.target.scrollTop;\n  }\n\n  componentDidUpdate() {\n    this.updateInternalProps();\n    this.showPlaceholder();\n  }\n\n  componentDidMount() {\n    this.showPlaceholder();\n  }\n\n  componentWillUnmount() {\n    if (this.timer) clearInterval(this.timer);\n  }\n\n  showPlaceholder() {\n    const placeholderDoesNotExist = !('placeholder' in this.props);\n    if (placeholderDoesNotExist) return;\n    const {\n      placeholder\n    } = this.props;\n    const placeholderHasEmptyValues = [undefined, null].indexOf(placeholder) > -1;\n    if (placeholderHasEmptyValues) return;\n    const {\n      prevPlaceholder,\n      jsObject\n    } = this.state;\n    const {\n      resetConfiguration\n    } = this;\n    const placeholderDataType = (0,_mitsuketa__WEBPACK_IMPORTED_MODULE_5__.getType)(placeholder);\n    const unexpectedDataType = ['object', 'array'].indexOf(placeholderDataType) === -1;\n    if (unexpectedDataType) _err__WEBPACK_IMPORTED_MODULE_6__[\"default\"].throwError('showPlaceholder', 'placeholder', 'either an object or an array');\n    const samePlaceholderValues = (0,_mitsuketa__WEBPACK_IMPORTED_MODULE_5__.identical)(placeholder, prevPlaceholder); // Component will always re-render when new placeholder value is any different from previous placeholder value.\n\n    let componentShouldUpdate = !samePlaceholderValues;\n\n    if (!componentShouldUpdate) {\n      if (resetConfiguration) {\n        /**\r\n         * If 'reset' property is set true or is truthy,\r\n         * any difference between placeholder and current value\r\n         * should trigger component re-render\r\n         */\n        if (jsObject !== undefined) componentShouldUpdate = !(0,_mitsuketa__WEBPACK_IMPORTED_MODULE_5__.identical)(placeholder, jsObject);\n      }\n    }\n\n    if (!componentShouldUpdate) return;\n    const data = this.tokenize(placeholder);\n    this.setState({\n      prevPlaceholder: placeholder,\n      plainText: data.indentation,\n      markupText: data.markup,\n      lines: data.lines,\n      error: data.error\n    });\n  }\n\n  tokenize(something) {\n    if (typeof something !== 'object') return console.error('tokenize() expects object type properties only. Got \\'' + typeof something + '\\' type instead.');\n    const locale = this.props.locale || _locale_en__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n    const newSpan = this.newSpan;\n    /**\r\n     *     DOM NODE || ONBLUR OR UPDATE\r\n     */\n\n    if ('nodeType' in something) {\n      const containerNode = something.cloneNode(true),\n            hasChildren = containerNode.hasChildNodes();\n      if (!hasChildren) return '';\n      const children = containerNode.childNodes;\n      let buffer = {\n        tokens_unknown: [],\n        tokens_proto: [],\n        tokens_split: [],\n        tokens_fallback: [],\n        tokens_normalize: [],\n        tokens_merge: [],\n        tokens_plainText: '',\n        indented: '',\n        json: '',\n        jsObject: undefined,\n        markup: ''\n      };\n\n      for (var i = 0; i < children.length; i++) {\n        let child = children[i];\n        let info = {};\n\n        switch (child.nodeName) {\n          case 'SPAN':\n            info = {\n              string: child.textContent,\n              type: child.attributes.type.textContent\n            };\n            buffer.tokens_unknown.push(info);\n            break;\n\n          case 'DIV':\n            buffer.tokens_unknown.push({\n              string: child.textContent,\n              type: 'unknown'\n            });\n            break;\n\n          case 'BR':\n            if (child.textContent === '') buffer.tokens_unknown.push({\n              string: '\\n',\n              type: 'unknown'\n            });\n            break;\n\n          case '#text':\n            buffer.tokens_unknown.push({\n              string: child.wholeText,\n              type: 'unknown'\n            });\n            break;\n\n          case 'FONT':\n            buffer.tokens_unknown.push({\n              string: child.textContent,\n              type: 'unknown'\n            });\n            break;\n\n          default:\n            console.error('Unrecognized node:', {\n              child\n            });\n            break;\n        }\n      }\n\n      function quarkize(text, prefix = '') {\n        let buffer = {\n          active: false,\n          string: '',\n          number: '',\n          symbol: '',\n          space: '',\n          delimiter: '',\n          quarks: []\n        };\n\n        function pushAndStore(char, type) {\n          switch (type) {\n            case 'symbol':\n            case 'delimiter':\n              if (buffer.active) buffer.quarks.push({\n                string: buffer[buffer.active],\n                type: prefix + '-' + buffer.active\n              });\n              buffer[buffer.active] = '';\n              buffer.active = type;\n              buffer[buffer.active] = char;\n              break;\n\n            default:\n              if (type !== buffer.active || [buffer.string, char].indexOf('\\n') > -1) {\n                if (buffer.active) buffer.quarks.push({\n                  string: buffer[buffer.active],\n                  type: prefix + '-' + buffer.active\n                });\n                buffer[buffer.active] = '';\n                buffer.active = type;\n                buffer[buffer.active] = char;\n              } else buffer[type] += char;\n\n              break;\n          }\n        }\n\n        function finalPush() {\n          if (buffer.active) {\n            buffer.quarks.push({\n              string: buffer[buffer.active],\n              type: prefix + '-' + buffer.active\n            });\n            buffer[buffer.active] = '';\n            buffer.active = false;\n          }\n        }\n\n        for (var i = 0; i < text.length; i++) {\n          const char = text.charAt(i);\n\n          switch (char) {\n            case '\"':\n            case \"'\":\n              pushAndStore(char, 'delimiter');\n              break;\n\n            case ' ':\n            case '\\u00A0':\n              pushAndStore(char, 'space');\n              break;\n\n            case '{':\n            case '}':\n            case '[':\n            case ']':\n            case ':':\n            case ',':\n              pushAndStore(char, 'symbol');\n              break;\n\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n              if (buffer.active === 'string') pushAndStore(char, 'string');else pushAndStore(char, 'number');\n              break;\n\n            case '-':\n              if (i < text.length - 1) if ('0123456789'.indexOf(text.charAt(i + 1)) > -1) {\n                pushAndStore(char, 'number');\n                break;\n              }\n\n            case '.':\n              if (i < text.length - 1 && i > 0) if ('0123456789'.indexOf(text.charAt(i + 1)) > -1 && '0123456789'.indexOf(text.charAt(i - 1)) > -1) {\n                pushAndStore(char, 'number');\n                break;\n              }\n\n            default:\n              pushAndStore(char, 'string');\n              break;\n          }\n        }\n\n        finalPush();\n        return buffer.quarks;\n      }\n\n      for (var i = 0; i < buffer.tokens_unknown.length; i++) {\n        let token = buffer.tokens_unknown[i];\n        buffer.tokens_proto = buffer.tokens_proto.concat(quarkize(token.string, 'proto'));\n      }\n\n      function validToken(string, type) {\n        const quotes = '\\'\"';\n        let firstChar = '',\n            lastChar = '',\n            quoteType = false;\n\n        switch (type) {\n          case 'primitive':\n            if (['true', 'false', 'null', 'undefined'].indexOf(string) === -1) return false;\n            break;\n\n          case 'string':\n            if (string.length < 2) return false;\n            firstChar = string.charAt(0), lastChar = string.charAt(string.length - 1), quoteType = quotes.indexOf(firstChar);\n            if (quoteType === -1) return false;\n            if (firstChar !== lastChar) return false;\n\n            for (var i = 0; i < string.length; i++) {\n              if (i > 0 && i < string.length - 1) if (string.charAt(i) === quotes[quoteType]) if (string.charAt(i - 1) !== '\\\\') return false;\n            }\n\n            break;\n\n          case 'key':\n            if (string.length === 0) return false;\n            firstChar = string.charAt(0), lastChar = string.charAt(string.length - 1), quoteType = quotes.indexOf(firstChar);\n\n            if (quoteType > -1) {\n              if (string.length === 1) return false;\n              if (firstChar !== lastChar) return false;\n\n              for (var i = 0; i < string.length; i++) {\n                if (i > 0 && i < string.length - 1) if (string.charAt(i) === quotes[quoteType]) if (string.charAt(i - 1) !== '\\\\') return false;\n              }\n            } else {\n              const nonAlphanumeric = '\\'\"`.,:;{}[]&<>=~*%\\\\|/-+!?@^ \\xa0';\n\n              for (var i = 0; i < nonAlphanumeric.length; i++) {\n                const nonAlpha = nonAlphanumeric.charAt(i);\n                if (string.indexOf(nonAlpha) > -1) return false;\n              }\n            }\n\n            break;\n\n          case 'number':\n            for (var i = 0; i < string.length; i++) {\n              if ('0123456789'.indexOf(string.charAt(i)) === -1) if (i === 0) {\n                if ('-' !== string.charAt(0)) return false;\n              } else if ('.' !== string.charAt(i)) return false;\n            }\n\n            break;\n\n          case 'symbol':\n            if (string.length > 1) return false;\n            if ('{[:]},'.indexOf(string) === -1) return false;\n            break;\n\n          case 'colon':\n            if (string.length > 1) return false;\n            if (':' !== string) return false;\n            break;\n\n          default:\n            return true;\n            break;\n        }\n\n        return true;\n      }\n\n      for (var i = 0; i < buffer.tokens_proto.length; i++) {\n        let token = buffer.tokens_proto[i];\n\n        if (token.type.indexOf('proto') === -1) {\n          if (!validToken(token.string, token.type)) {\n            buffer.tokens_split = buffer.tokens_split.concat(quarkize(token.string, 'split'));\n          } else buffer.tokens_split.push(token);\n        } else buffer.tokens_split.push(token);\n      }\n\n      for (var i = 0; i < buffer.tokens_split.length; i++) {\n        let token = buffer.tokens_split[i];\n        let type = token.type,\n            string = token.string,\n            length = string.length,\n            fallback = [];\n\n        if (type.indexOf('-') > -1) {\n          type = type.slice(type.indexOf('-') + 1);\n          if (type !== 'string') fallback.push('string');\n          fallback.push('key');\n          fallback.push('error');\n        }\n\n        let tokul = {\n          string: string,\n          length: length,\n          type: type,\n          fallback: fallback\n        };\n        buffer.tokens_fallback.push(tokul);\n      }\n\n      function tokenFollowed() {\n        const last = buffer.tokens_normalize.length - 1;\n        if (last < 1) return false;\n\n        for (var i = last; i >= 0; i--) {\n          const previousToken = buffer.tokens_normalize[i];\n\n          switch (previousToken.type) {\n            case 'space':\n            case 'linebreak':\n              break;\n\n            default:\n              return previousToken;\n              break;\n          }\n        }\n\n        return false;\n      }\n\n      let buffer2 = {\n        brackets: [],\n        stringOpen: false,\n        isValue: false\n      };\n\n      for (var i = 0; i < buffer.tokens_fallback.length; i++) {\n        let token = buffer.tokens_fallback[i];\n        const type = token.type,\n              string = token.string;\n        let normalToken = {\n          type: type,\n          string: string\n        };\n\n        switch (type) {\n          case 'symbol':\n          case 'colon':\n            if (buffer2.stringOpen) {\n              if (buffer2.isValue) normalToken.type = 'string';else normalToken.type = 'key';\n              break;\n            }\n\n            switch (string) {\n              case '[':\n              case '{':\n                buffer2.brackets.push(string);\n                buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === '[';\n                break;\n\n              case ']':\n              case '}':\n                buffer2.brackets.pop();\n                buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === '[';\n                break;\n\n              case ',':\n                if (tokenFollowed().type === 'colon') break;\n                buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === '[';\n                break;\n\n              case ':':\n                normalToken.type = 'colon';\n                buffer2.isValue = true;\n                break;\n            }\n\n            break;\n\n          case 'delimiter':\n            if (buffer2.isValue) normalToken.type = 'string';else normalToken.type = 'key';\n\n            if (!buffer2.stringOpen) {\n              buffer2.stringOpen = string;\n              break;\n            }\n\n            if (i > 0) {\n              const previousToken = buffer.tokens_fallback[i - 1],\n                    _string = previousToken.string,\n                    _type = previousToken.type,\n                    _char = _string.charAt(_string.length - 1);\n\n              if (_type === 'string' && _char === '\\\\') break;\n            }\n\n            if (buffer2.stringOpen === string) {\n              buffer2.stringOpen = false;\n              break;\n            }\n\n            break;\n\n          case 'primitive':\n          case 'string':\n            if (['false', 'true', 'null', 'undefined'].indexOf(string) > -1) {\n              const lastIndex = buffer.tokens_normalize.length - 1;\n\n              if (lastIndex >= 0) {\n                if (buffer.tokens_normalize[lastIndex].type !== 'string') {\n                  normalToken.type = 'primitive';\n                  break;\n                }\n\n                normalToken.type = 'string';\n                break;\n              }\n\n              normalToken.type = 'primitive';\n              break;\n            }\n\n            if (string === '\\n') if (!buffer2.stringOpen) {\n              normalToken.type = 'linebreak';\n              break;\n            }\n            if (buffer2.isValue) normalToken.type = 'string';else normalToken.type = 'key';\n            break;\n\n          case 'space':\n            if (buffer2.stringOpen) if (buffer2.isValue) normalToken.type = 'string';else normalToken.type = 'key';\n            break;\n\n          case 'number':\n            if (buffer2.stringOpen) if (buffer2.isValue) normalToken.type = 'string';else normalToken.type = 'key';\n            break;\n\n          default:\n            break;\n        }\n\n        buffer.tokens_normalize.push(normalToken);\n      }\n\n      for (var i = 0; i < buffer.tokens_normalize.length; i++) {\n        const token = buffer.tokens_normalize[i];\n        let mergedToken = {\n          string: token.string,\n          type: token.type,\n          tokens: [i]\n        };\n        if (['symbol', 'colon'].indexOf(token.type) === -1) if (i + 1 < buffer.tokens_normalize.length) {\n          let count = 0;\n\n          for (var u = i + 1; u < buffer.tokens_normalize.length; u++) {\n            const nextToken = buffer.tokens_normalize[u];\n            if (token.type !== nextToken.type) break;\n            mergedToken.string += nextToken.string;\n            mergedToken.tokens.push(u);\n            count++;\n          }\n\n          i += count;\n        }\n        buffer.tokens_merge.push(mergedToken);\n      }\n\n      const quotes = '\\'\"',\n            alphanumeric = 'abcdefghijklmnopqrstuvwxyz' + 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + '0123456789' + '_$';\n      var error = false,\n          line = buffer.tokens_merge.length > 0 ? 1 : 0;\n      buffer2 = {\n        brackets: [],\n        stringOpen: false,\n        isValue: false\n      };\n\n      function setError(tokenID, reason, offset = 0) {\n        error = {\n          token: tokenID,\n          line: line,\n          reason: reason\n        };\n        buffer.tokens_merge[tokenID + offset].type = 'error';\n      }\n\n      function followedBySymbol(tokenID, options) {\n        if (tokenID === undefined) console.error('tokenID argument must be an integer.');\n        if (options === undefined) console.error('options argument must be an array.');\n        if (tokenID === buffer.tokens_merge.length - 1) return false;\n\n        for (var i = tokenID + 1; i < buffer.tokens_merge.length; i++) {\n          const nextToken = buffer.tokens_merge[i];\n\n          switch (nextToken.type) {\n            case 'space':\n            case 'linebreak':\n              break;\n\n            case 'symbol':\n            case 'colon':\n              if (options.indexOf(nextToken.string) > -1) return i;else return false;\n              break;\n\n            default:\n              return false;\n              break;\n          }\n        }\n\n        return false;\n      }\n\n      function followsSymbol(tokenID, options) {\n        if (tokenID === undefined) console.error('tokenID argument must be an integer.');\n        if (options === undefined) console.error('options argument must be an array.');\n        if (tokenID === 0) return false;\n\n        for (var i = tokenID - 1; i >= 0; i--) {\n          const previousToken = buffer.tokens_merge[i];\n\n          switch (previousToken.type) {\n            case 'space':\n            case 'linebreak':\n              break;\n\n            case 'symbol':\n            case 'colon':\n              if (options.indexOf(previousToken.string) > -1) return true;\n              return false;\n              break;\n\n            default:\n              return false;\n              break;\n          }\n        }\n\n        return false;\n      }\n\n      function typeFollowed(tokenID) {\n        if (tokenID === undefined) console.error('tokenID argument must be an integer.');\n        if (tokenID === 0) return false;\n\n        for (var i = tokenID - 1; i >= 0; i--) {\n          const previousToken = buffer.tokens_merge[i];\n\n          switch (previousToken.type) {\n            case 'space':\n            case 'linebreak':\n              break;\n\n            default:\n              return previousToken.type;\n              break;\n          }\n        }\n\n        return false;\n      }\n\n      let bracketList = [];\n\n      for (var i = 0; i < buffer.tokens_merge.length; i++) {\n        if (error) break;\n        let token = buffer.tokens_merge[i],\n            string = token.string,\n            type = token.type,\n            found = false;\n\n        switch (type) {\n          case 'space':\n            break;\n\n          case 'linebreak':\n            line++;\n            break;\n\n          case 'symbol':\n            switch (string) {\n              case '{':\n              case '[':\n                found = followsSymbol(i, ['}', ']']);\n\n                if (found) {\n                  setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.tokenSequence.prohibited, {\n                    firstToken: buffer.tokens_merge[found].string,\n                    secondToken: string\n                  }));\n                  break;\n                }\n\n                if (string === '[' && i > 0) if (!followsSymbol(i, [':', '[', ','])) {\n                  setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.tokenSequence.permitted, {\n                    firstToken: \"[\",\n                    secondToken: [\":\", \"[\", \",\"]\n                  }));\n                  break;\n                }\n                if (string === '{') if (followsSymbol(i, ['{'])) {\n                  setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.double, {\n                    token: \"{\"\n                  }));\n                  break;\n                }\n                buffer2.brackets.push(string);\n                buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === '[';\n                bracketList.push({\n                  i: i,\n                  line: line,\n                  string: string\n                });\n                break;\n\n              case '}':\n              case ']':\n                if (string === '}') if (buffer2.brackets[buffer2.brackets.length - 1] !== '{') {\n                  setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.brace.curly.missingOpen));\n                  break;\n                }\n                if (string === '}') if (followsSymbol(i, [','])) {\n                  setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.tokenSequence.prohibited, {\n                    firstToken: \",\",\n                    secondToken: \"}\"\n                  }));\n                  break;\n                }\n                if (string === ']') if (buffer2.brackets[buffer2.brackets.length - 1] !== '[') {\n                  setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.brace.square.missingOpen));\n                  break;\n                }\n                if (string === ']') if (followsSymbol(i, [':'])) {\n                  setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.tokenSequence.prohibited, {\n                    firstToken: \":\",\n                    secondToken: \"]\"\n                  }));\n                  break;\n                }\n                buffer2.brackets.pop();\n                buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === '[';\n                bracketList.push({\n                  i: i,\n                  line: line,\n                  string: string\n                });\n                break;\n\n              case ',':\n                found = followsSymbol(i, ['{']);\n\n                if (found) {\n                  if (followedBySymbol(i, ['}'])) {\n                    setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.brace.curly.cannotWrap, {\n                      token: \",\"\n                    }));\n                    break;\n                  }\n\n                  setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.tokenSequence.prohibited, {\n                    firstToken: \"{\",\n                    secondToken: \",\"\n                  }));\n                  break;\n                }\n\n                if (followedBySymbol(i, ['}', ',', ']'])) {\n                  setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.noTrailingOrLeadingComma));\n                  break;\n                }\n\n                found = typeFollowed(i);\n\n                switch (found) {\n                  case 'key':\n                  case 'colon':\n                    setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.termSequence.prohibited, {\n                      firstTerm: found === 'key' ? locale.types.key : locale.symbols.colon,\n                      secondTerm: locale.symbols.comma\n                    }));\n                    break;\n\n                  case 'symbol':\n                    if (followsSymbol(i, ['{'])) {\n                      setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.tokenSequence.prohibited, {\n                        firstToken: \"{\",\n                        secondToken: \",\"\n                      }));\n                      break;\n                    }\n\n                    break;\n\n                  default:\n                    break;\n                }\n\n                buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === '[';\n                break;\n\n              default:\n                break;\n            }\n\n            buffer.json += string;\n            break;\n\n          case 'colon':\n            found = followsSymbol(i, ['[']);\n\n            if (found && followedBySymbol(i, [']'])) {\n              setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.brace.square.cannotWrap, {\n                token: \":\"\n              }));\n              break;\n            }\n\n            if (found) {\n              setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.tokenSequence.prohibited, {\n                firstToken: \"[\",\n                secondToken: \":\"\n              }));\n              break;\n            }\n\n            if (typeFollowed(i) !== 'key') {\n              setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.termSequence.permitted, {\n                firstTerm: locale.symbols.colon,\n                secondTerm: locale.types.key\n              }));\n              break;\n            }\n\n            if (followedBySymbol(i, ['}', ']'])) {\n              setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.termSequence.permitted, {\n                firstTerm: locale.symbols.colon,\n                secondTerm: locale.types.value\n              }));\n              break;\n            }\n\n            buffer2.isValue = true;\n            buffer.json += string;\n            break;\n\n          case 'key':\n          case 'string':\n            let firstChar = string.charAt(0),\n                lastChar = string.charAt(string.length - 1),\n                quote_primary = quotes.indexOf(firstChar);\n            if (quotes.indexOf(firstChar) === -1) if (quotes.indexOf(lastChar) !== -1) {\n              setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.string.missingOpen, {\n                quote: firstChar\n              }));\n              break;\n            }\n            if (quotes.indexOf(lastChar) === -1) if (quotes.indexOf(firstChar) !== -1) {\n              setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.string.missingClose, {\n                quote: firstChar\n              }));\n              break;\n            }\n            if (quotes.indexOf(firstChar) > -1) if (firstChar !== lastChar) {\n              setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.string.missingClose, {\n                quote: firstChar\n              }));\n              break;\n            }\n            if ('string' === type) if (quotes.indexOf(firstChar) === -1 && quotes.indexOf(lastChar) === -1) {\n              setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.string.mustBeWrappedByQuotes));\n              break;\n            }\n            if ('key' === type) if (followedBySymbol(i, ['}', ']'])) {\n              setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.termSequence.permitted, {\n                firstTerm: locale.types.key,\n                secondTerm: locale.symbols.colon\n              }));\n            }\n            if (quotes.indexOf(firstChar) === -1 && quotes.indexOf(lastChar) === -1) for (var h = 0; h < string.length; h++) {\n              if (error) break;\n              const c = string.charAt(h);\n\n              if (alphanumeric.indexOf(c) === -1) {\n                setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.string.nonAlphanumeric, {\n                  token: c\n                }));\n                break;\n              }\n            }\n            if (firstChar === \"'\") string = '\"' + string.slice(1, -1) + '\"';else if (firstChar !== '\"') string = '\"' + string + '\"';\n            if ('key' === type) if ('key' === typeFollowed(i)) {\n              if (i > 0) if (!isNaN(buffer.tokens_merge[i - 1])) {\n                buffer.tokens_merge[i - 1] += buffer.tokens_merge[i];\n                setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.key.numberAndLetterMissingQuotes));\n                break;\n              }\n              setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.key.spaceMissingQuotes));\n              break;\n            }\n            if ('key' === type) if (!followsSymbol(i, ['{', ','])) {\n              setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.tokenSequence.permitted, {\n                firstToken: type,\n                secondToken: [\"{\", \",\"]\n              }));\n              break;\n            }\n            if ('string' === type) if (!followsSymbol(i, ['[', ':', ','])) {\n              setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.tokenSequence.permitted, {\n                firstToken: type,\n                secondToken: [\"[\", \":\", \",\"]\n              }));\n              break;\n            }\n            if ('key' === type) if (buffer2.isValue) {\n              setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.string.unexpectedKey));\n              break;\n            }\n            if ('string' === type) if (!buffer2.isValue) {\n              setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.key.unexpectedString));\n              break;\n            }\n            buffer.json += string;\n            break;\n\n          case 'number':\n          case 'primitive':\n            if (followsSymbol(i, ['{'])) {\n              buffer.tokens_merge[i].type = 'key';\n              type = buffer.tokens_merge[i].type;\n              string = '\"' + string + '\"';\n            } else if (typeFollowed(i) === 'key') {\n              buffer.tokens_merge[i].type = 'key';\n              type = buffer.tokens_merge[i].type;\n            } else if (!followsSymbol(i, ['[', ':', ','])) {\n              setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.tokenSequence.permitted, {\n                firstToken: type,\n                secondToken: [\"[\", \":\", \",\"]\n              }));\n              break;\n            }\n\n            if (type !== 'key') if (!buffer2.isValue) {\n              buffer.tokens_merge[i].type = 'key';\n              type = buffer.tokens_merge[i].type;\n              string = '\"' + string + '\"';\n            }\n            if (type === 'primitive') if (string === 'undefined') setError(i, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.useInstead, {\n              badToken: \"undefined\",\n              goodToken: \"null\"\n            }));\n            buffer.json += string;\n            break;\n        }\n      }\n\n      let noEscapedSingleQuote = '';\n\n      for (var i = 0; i < buffer.json.length; i++) {\n        let current = buffer.json.charAt(i),\n            next = '';\n\n        if (i + 1 < buffer.json.length) {\n          next = buffer.json.charAt(i + 1);\n\n          if (current === '\\\\' && next === \"'\") {\n            noEscapedSingleQuote += next;\n            i++;\n            continue;\n          }\n        }\n\n        noEscapedSingleQuote += current;\n      }\n\n      buffer.json = noEscapedSingleQuote;\n\n      if (!error) {\n        const maxIterations = Math.ceil(bracketList.length / 2);\n        let round = 0,\n            delta = false;\n\n        function removePair(index) {\n          bracketList.splice(index + 1, 1);\n          bracketList.splice(index, 1);\n          if (!delta) delta = true;\n        }\n\n        while (bracketList.length > 0) {\n          delta = false;\n\n          for (var tokenCount = 0; tokenCount < bracketList.length - 1; tokenCount++) {\n            const pair = bracketList[tokenCount].string + bracketList[tokenCount + 1].string;\n            if (['[]', '{}'].indexOf(pair) > -1) removePair(tokenCount);\n          }\n\n          round++;\n          if (!delta) break;\n          if (round >= maxIterations) break;\n        }\n\n        if (bracketList.length > 0) {\n          const _tokenString = bracketList[0].string,\n                _tokenPosition = bracketList[0].i,\n                _closingBracketType = _tokenString === '[' ? ']' : '}';\n\n          line = bracketList[0].line;\n          setError(_tokenPosition, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.brace[_closingBracketType === ']' ? 'square' : 'curly'].missingClose));\n        }\n      }\n\n      if (!error) if ([undefined, ''].indexOf(buffer.json) === -1) try {\n        buffer.jsObject = JSON.parse(buffer.json);\n      } catch (err) {\n        const errorMessage = err.message,\n              subsMark = errorMessage.indexOf('position');\n        if (subsMark === -1) throw new Error('Error parsing failed');\n        const errPositionStr = errorMessage.substring(subsMark + 9, errorMessage.length),\n              errPosition = parseInt(errPositionStr);\n        let charTotal = 0,\n            tokenIndex = 0,\n            token = false,\n            _line = 1,\n            exitWhile = false;\n\n        while (charTotal < errPosition && !exitWhile) {\n          token = buffer.tokens_merge[tokenIndex];\n          if ('linebreak' === token.type) _line++;\n          if (['space', 'linebreak'].indexOf(token.type) === -1) charTotal += token.string.length;\n          if (charTotal >= errPosition) break;\n          tokenIndex++;\n          if (!buffer.tokens_merge[tokenIndex + 1]) exitWhile = true;\n        }\n\n        line = _line;\n        let backslashCount = 0;\n\n        for (let i = 0; i < token.string.length; i++) {\n          const char = token.string.charAt(i);\n          if (char === '\\\\') backslashCount = backslashCount > 0 ? backslashCount + 1 : 1;else {\n            if (backslashCount % 2 !== 0 || backslashCount === 0) if ('\\'\"bfnrt'.indexOf(char) === -1) {\n              setError(tokenIndex, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.unexpected, {\n                token: '\\\\'\n              }));\n            }\n            backslashCount = 0;\n          }\n        }\n\n        if (!error) setError(tokenIndex, (0,_locale__WEBPACK_IMPORTED_MODULE_4__.format)(locale.invalidToken.unexpected, {\n          token: token.string\n        }));\n      }\n      let _line = 1,\n          _depth = 0;\n\n      function newIndent() {\n        var space = [];\n\n        for (var i = 0; i < _depth * 2; i++) space.push('&nbsp;');\n\n        return space.join('');\n      }\n\n      function newLineBreak(byPass = false) {\n        _line++;\n\n        if (_depth > 0 || byPass) {\n          return '<br>';\n        }\n\n        return '';\n      }\n\n      function newLineBreakAndIndent(byPass = false) {\n        return newLineBreak(byPass) + newIndent();\n      }\n\n      ;\n      if (!error) for (var i = 0; i < buffer.tokens_merge.length; i++) {\n        const token = buffer.tokens_merge[i],\n              string = token.string,\n              type = token.type;\n\n        switch (type) {\n          case 'space':\n          case 'linebreak':\n            break;\n\n          case 'string':\n          case 'number':\n          case 'primitive':\n          case 'error':\n            buffer.markup += (followsSymbol(i, [',', '[']) ? newLineBreakAndIndent() : '') + newSpan(i, token, _depth);\n            break;\n\n          case 'key':\n            buffer.markup += newLineBreakAndIndent() + newSpan(i, token, _depth);\n            break;\n\n          case 'colon':\n            buffer.markup += newSpan(i, token, _depth) + '&nbsp;';\n            break;\n\n          case 'symbol':\n            switch (string) {\n              case '[':\n              case '{':\n                buffer.markup += (!followsSymbol(i, [':']) ? newLineBreakAndIndent() : '') + newSpan(i, token, _depth);\n                _depth++;\n                break;\n\n              case ']':\n              case '}':\n                _depth--;\n\n                const islastToken = i === buffer.tokens_merge.length - 1,\n                      _adjustment = i > 0 ? ['[', '{'].indexOf(buffer.tokens_merge[i - 1].string) > -1 ? '' : newLineBreakAndIndent(islastToken) : '';\n\n                buffer.markup += _adjustment + newSpan(i, token, _depth);\n                break;\n\n              case ',':\n                buffer.markup += newSpan(i, token, _depth);\n                break;\n            }\n\n            break;\n        }\n      }\n\n      if (error) {\n        let _line_fallback = 1;\n\n        function countCarrigeReturn(string) {\n          let count = 0;\n\n          for (var i = 0; i < string.length; i++) {\n            if (['\\n', '\\r'].indexOf(string[i]) > -1) count++;\n          }\n\n          return count;\n        }\n\n        _line = 1;\n\n        for (var i = 0; i < buffer.tokens_merge.length; i++) {\n          const token = buffer.tokens_merge[i],\n                type = token.type,\n                string = token.string;\n          if (type === 'linebreak') _line++;\n          buffer.markup += newSpan(i, token, _depth);\n          _line_fallback += countCarrigeReturn(string);\n        }\n\n        _line++;\n        _line_fallback++;\n        if (_line < _line_fallback) _line = _line_fallback;\n      }\n\n      for (var i = 0; i < buffer.tokens_merge.length; i++) {\n        let token = buffer.tokens_merge[i];\n        buffer.indented += token.string;\n        if (['space', 'linebreak'].indexOf(token.type) === -1) buffer.tokens_plainText += token.string;\n      }\n\n      if (error) {\n        function isFunction(functionToCheck) {\n          return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n        }\n\n        if ('modifyErrorText' in this.props) if (isFunction(this.props.modifyErrorText)) error.reason = this.props.modifyErrorText(error.reason);\n      }\n\n      return {\n        tokens: buffer.tokens_merge,\n        noSpaces: buffer.tokens_plainText,\n        indented: buffer.indented,\n        json: buffer.json,\n        jsObject: buffer.jsObject,\n        markup: buffer.markup,\n        lines: _line,\n        error: error\n      };\n    }\n\n    ;\n    /**\r\n     *     JS OBJECTS || PLACEHOLDER\r\n     */\n\n    if (!('nodeType' in something)) {\n      let buffer = {\n        inputText: JSON.stringify(something),\n        position: 0,\n        currentChar: '',\n        tokenPrimary: '',\n        tokenSecondary: '',\n        brackets: [],\n        isValue: false,\n        stringOpen: false,\n        stringStart: 0,\n        tokens: []\n      };\n\n      function escape_character() {\n        if (buffer.currentChar !== '\\\\') return false;\n        return true;\n      }\n\n      function extract(string, position) {\n        return string.slice(0, position) + string.slice(position + 1);\n      }\n\n      function determine_string() {\n        if ('\\'\"'.indexOf(buffer.currentChar) === -1) return false;\n\n        if (!buffer.stringOpen) {\n          add_tokenSecondary();\n          buffer.stringStart = buffer.position;\n          buffer.stringOpen = buffer.currentChar;\n          return true;\n        }\n\n        if (buffer.stringOpen === buffer.currentChar) {\n          add_tokenSecondary();\n          const stringToken = buffer.inputText.substring(buffer.stringStart, buffer.position + 1);\n          add_tokenPrimary(stringToken);\n          buffer.stringOpen = false;\n          return true;\n        }\n\n        return false;\n      }\n\n      function determine_value() {\n        if (':,{}[]'.indexOf(buffer.currentChar) === -1) return false;\n        if (buffer.stringOpen) return false;\n        add_tokenSecondary();\n        add_tokenPrimary(buffer.currentChar);\n\n        switch (buffer.currentChar) {\n          case ':':\n            buffer.isValue = true;\n            return true;\n            break;\n\n          case '{':\n          case '[':\n            buffer.brackets.push(buffer.currentChar);\n            break;\n\n          case '}':\n          case ']':\n            buffer.brackets.pop();\n            break;\n        }\n\n        if (buffer.currentChar !== ':') buffer.isValue = buffer.brackets[buffer.brackets.length - 1] === '[';\n        return true;\n      }\n\n      function add_tokenSecondary() {\n        if (buffer.tokenSecondary.length === 0) return false;\n        buffer.tokens.push(buffer.tokenSecondary);\n        buffer.tokenSecondary = '';\n        return true;\n      }\n\n      function add_tokenPrimary(value) {\n        if (value.length === 0) return false;\n        buffer.tokens.push(value);\n        return true;\n      }\n\n      for (var i = 0; i < buffer.inputText.length; i++) {\n        buffer.position = i;\n        buffer.currentChar = buffer.inputText.charAt(buffer.position);\n        const a = determine_value(),\n              b = determine_string(),\n              c = escape_character();\n        if (!a && !b && !c) if (!buffer.stringOpen) buffer.tokenSecondary += buffer.currentChar;\n      }\n\n      let buffer2 = {\n        brackets: [],\n        isValue: false,\n        tokens: []\n      };\n      buffer2.tokens = buffer.tokens.map(token => {\n        let type = '',\n            string = '',\n            value = '';\n\n        switch (token) {\n          case ',':\n            type = 'symbol';\n            string = token;\n            value = token;\n            buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === '[';\n            break;\n\n          case ':':\n            type = 'symbol';\n            string = token;\n            value = token;\n            buffer2.isValue = true;\n            break;\n\n          case '{':\n          case '[':\n            type = 'symbol';\n            string = token;\n            value = token;\n            buffer2.brackets.push(token);\n            buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === '[';\n            break;\n\n          case '}':\n          case ']':\n            type = 'symbol';\n            string = token;\n            value = token;\n            buffer2.brackets.pop();\n            buffer2.isValue = buffer2.brackets[buffer2.brackets.length - 1] === '[';\n            break;\n\n          case 'undefined':\n            type = 'primitive';\n            string = token;\n            value = undefined;\n            break;\n\n          case 'null':\n            type = 'primitive';\n            string = token;\n            value = null;\n            break;\n\n          case 'false':\n            type = 'primitive';\n            string = token;\n            value = false;\n            break;\n\n          case 'true':\n            type = 'primitive';\n            string = token;\n            value = true;\n            break;\n\n          default:\n            const C = token.charAt(0);\n\n            function stripQuotesFromKey(text) {\n              if (text.length === 0) return text;\n              if (['\"\"', \"''\"].indexOf(text) > -1) return \"''\";\n              let wrappedInQuotes = false;\n\n              for (var i = 0; i < 2; i++) {\n                if ([text.charAt(0), text.charAt(text.length - 1)].indexOf(['\"', \"'\"][i]) > -1) {\n                  wrappedInQuotes = true;\n                  break;\n                }\n              }\n\n              if (wrappedInQuotes && text.length >= 2) text = text.slice(1, -1);\n\n              const nonAlphaNumeric = text.replace(/\\w/g, ''),\n                    alphaNumeric = text.replace(/\\W+/g, ''),\n                    mayRemoveQuotes = ((nonAlphaNumeric, text) => {\n                let numberAndLetter = false;\n\n                for (var i = 0; i < text.length; i++) {\n                  if (i === 0) if (isNaN(text.charAt(i))) break;\n\n                  if (isNaN(text.charAt(i))) {\n                    numberAndLetter = true;\n                    break;\n                  }\n                }\n\n                return !(nonAlphaNumeric.length > 0 || numberAndLetter);\n              })(nonAlphaNumeric, text),\n                    hasQuotes = (string => {\n                for (var i = 0; i < string.length; i++) {\n                  if ([\"'\", '\"'].indexOf(string.charAt(i)) > -1) return true;\n                }\n\n                return false;\n              })(nonAlphaNumeric);\n\n              if (hasQuotes) {\n                let newText = '';\n                const charList = text.split('');\n\n                for (var ii = 0; ii < charList.length; ii++) {\n                  let char = charList[ii];\n                  if ([\"'\", '\"'].indexOf(char) > -1) char = '\\\\' + char;\n                  newText += char;\n                }\n\n                text = newText;\n              }\n\n              if (!mayRemoveQuotes) return \"'\" + text + \"'\";else return text;\n            }\n\n            if ('\\'\"'.indexOf(C) > -1) {\n              if (buffer2.isValue) type = 'string';else type = 'key';\n              if (type === 'key') string = stripQuotesFromKey(token);\n\n              if (type === 'string') {\n                string = '';\n                const charList2 = token.slice(1, -1).split('');\n\n                for (var ii = 0; ii < charList2.length; ii++) {\n                  let char = charList2[ii];\n                  if ('\\'\\\"'.indexOf(char) > -1) char = '\\\\' + char;\n                  string += char;\n                }\n\n                string = \"'\" + string + \"'\";\n              }\n\n              value = string;\n              break;\n            }\n\n            if (!isNaN(token)) {\n              type = 'number';\n              string = token;\n              value = Number(token);\n              break;\n            }\n\n            if (token.length > 0) if (!buffer2.isValue) {\n              type = 'key';\n              string = token;\n              if (string.indexOf(' ') > -1) string = \"'\" + string + \"'\";\n              value = string;\n              break;\n            }\n        }\n\n        return {\n          type: type,\n          string: string,\n          value: value,\n          depth: buffer2.brackets.length\n        };\n      });\n      let clean = '';\n\n      for (var i = 0; i < buffer2.tokens.length; i++) {\n        let token = buffer2.tokens[i];\n        clean += token.string;\n      }\n\n      function indent(number) {\n        var space = [];\n\n        for (var i = 0; i < number * 2; i++) space.push(' ');\n\n        return (number > 0 ? '\\n' : '') + space.join('');\n      }\n\n      ;\n      let indentation = '';\n\n      for (var i = 0; i < buffer2.tokens.length; i++) {\n        let token = buffer2.tokens[i];\n\n        switch (token.string) {\n          case '[':\n          case '{':\n            const nextToken = i < buffer2.tokens.length - 1 - 1 ? buffer2.tokens[i + 1] : '';\n            if ('}]'.indexOf(nextToken.string) === -1) indentation += token.string + indent(token.depth);else indentation += token.string;\n            break;\n\n          case ']':\n          case '}':\n            const prevToken = i > 0 ? buffer2.tokens[i - 1] : '';\n            if ('[{'.indexOf(prevToken.string) === -1) indentation += indent(token.depth) + token.string;else indentation += token.string;\n            break;\n\n          case ':':\n            indentation += token.string + ' ';\n            break;\n\n          case ',':\n            indentation += token.string + indent(token.depth);\n            break;\n\n          default:\n            indentation += token.string;\n            break;\n        }\n      }\n\n      let lines = 1;\n\n      function indentII(number) {\n        var space = [];\n        if (number > 0) lines++;\n\n        for (var i = 0; i < number * 2; i++) space.push('&nbsp;');\n\n        return (number > 0 ? '<br>' : '') + space.join('');\n      }\n\n      ;\n      let markup = '';\n      const lastIndex = buffer2.tokens.length - 1;\n\n      for (var i = 0; i < buffer2.tokens.length; i++) {\n        let token = buffer2.tokens[i];\n        let span = newSpan(i, token, token.depth);\n\n        switch (token.string) {\n          case '{':\n          case '[':\n            const nextToken = i < buffer2.tokens.length - 1 - 1 ? buffer2.tokens[i + 1] : '';\n            if ('}]'.indexOf(nextToken.string) === -1) markup += span + indentII(token.depth);else markup += span;\n            break;\n\n          case '}':\n          case ']':\n            const prevToken = i > 0 ? buffer2.tokens[i - 1] : '';\n            if ('[{'.indexOf(prevToken.string) === -1) markup += indentII(token.depth) + (lastIndex === i ? '<br>' : '') + span;else markup += span;\n            break;\n\n          case ':':\n            markup += span + ' ';\n            break;\n\n          case ',':\n            markup += span + indentII(token.depth);\n            break;\n\n          default:\n            markup += span;\n            break;\n        }\n      }\n\n      lines += 2;\n      return {\n        tokens: buffer2.tokens,\n        noSpaces: clean,\n        indented: indentation,\n        json: JSON.stringify(something),\n        jsObject: something,\n        markup: markup,\n        lines: lines\n      };\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (JSONInput);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/locale/en.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-json-editor-ajrm/es/locale/en.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  format: \"{reason} at line {line}\",\n  symbols: {\n    colon: \"colon\",\n    // :\n    comma: \"comma\",\n    // ,  ،  、\n    semicolon: \"semicolon\",\n    // ;\n    slash: \"slash\",\n    // /  relevant for comment syntax support\n    backslash: \"backslash\",\n    // \\  relevant for escaping character\n    brackets: {\n      round: \"round brackets\",\n      // ( )\n      square: \"square brackets\",\n      // [ ]\n      curly: \"curly brackets\",\n      // { }\n      angle: \"angle brackets\" // < >\n\n    },\n    period: \"period\",\n    // . Also known as full point, full stop, or dot\n    quotes: {\n      single: \"single quote\",\n      // '\n      double: \"double quote\",\n      // \"\n      grave: \"grave accent\" // ` used on Javascript ES6 Syntax for String Templates\n\n    },\n    space: \"space\",\n    //       \n    ampersand: \"ampersand\",\n    //\t&\n    asterisk: \"asterisk\",\n    //\t*  relevant for some comment sytanx\n    at: \"at sign\",\n    //\t@  multiple uses in other coding languages including certain data types\n    equals: \"equals sign\",\n    //\t=\n    hash: \"hash\",\n    //\t#\n    percent: \"percent\",\n    //\t%\n    plus: \"plus\",\n    //\t+\n    minus: \"minus\",\n    //\t−\n    dash: \"dash\",\n    //\t−\n    hyphen: \"hyphen\",\n    //\t−\n    tilde: \"tilde\",\n    //\t~\n    underscore: \"underscore\",\n    //\t_\n    bar: \"vertical bar\" //\t|\n\n  },\n  types: {\n    key: \"key\",\n    value: \"value\",\n    number: \"number\",\n    string: \"string\",\n    primitive: \"primitive\",\n    boolean: \"boolean\",\n    character: \"character\",\n    integer: \"integer\",\n    array: \"array\",\n    float: \"float\" //... Reference: https://en.wikipedia.org/wiki/List_of_data_structures\n\n  },\n  invalidToken: {\n    tokenSequence: {\n      prohibited: \"'{firstToken}' token cannot be followed by '{secondToken}' token(s)\",\n      permitted: \"'{firstToken}' token can only be followed by '{secondToken}' token(s)\"\n    },\n    termSequence: {\n      prohibited: \"A {firstTerm} cannot be followed by a {secondTerm}\",\n      permitted: \"A {firstTerm} can only be followed by a {secondTerm}\"\n    },\n    double: \"'{token}' token cannot be followed by another '{token}' token\",\n    useInstead: \"'{badToken}' token is not accepted. Use '{goodToken}' instead\",\n    unexpected: \"Unexpected '{token}' token found\"\n  },\n  brace: {\n    curly: {\n      missingOpen: \"Missing '{' open curly brace\",\n      missingClose: \"Open '{' curly brace is missing closing '}' curly brace\",\n      cannotWrap: \"'{token}' token cannot be wrapped in '{}' curly braces\"\n    },\n    square: {\n      missingOpen: \"Missing '[' open square brace\",\n      missingClose: \"Open '[' square brace is missing closing ']' square brace\",\n      cannotWrap: \"'{token}' token cannot be wrapped in '[]' square braces\"\n    }\n  },\n  string: {\n    missingOpen: \"Missing/invalid opening string '{quote}' token\",\n    missingClose: \"Missing/invalid closing string '{quote}' token\",\n    mustBeWrappedByQuotes: \"Strings must be wrapped by quotes\",\n    nonAlphanumeric: \"Non-alphanumeric token '{token}' is not allowed outside string notation\",\n    unexpectedKey: \"Unexpected key found at string position\"\n  },\n  key: {\n    numberAndLetterMissingQuotes: \"Key beginning with number and containing letters must be wrapped by quotes\",\n    spaceMissingQuotes: \"Key containing space must be wrapped by quotes\",\n    unexpectedString: \"Unexpected string found at key position\"\n  },\n  noTrailingOrLeadingComma: \"Trailing or leading commas in arrays and objects are not permitted\"\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1qc29uLWVkaXRvci1hanJtL2VzL2xvY2FsZS9lbi5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWU7QUFDZixZQUFZLFFBQVEsU0FBUyxLQUFLO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQSxxQkFBcUIsV0FBVyxnQ0FBZ0MsWUFBWTtBQUM1RSxvQkFBb0IsV0FBVyxrQ0FBa0MsWUFBWTtBQUM3RSxLQUFLO0FBQ0w7QUFDQSxzQkFBc0IsV0FBVyx5QkFBeUIsV0FBVztBQUNyRSxxQkFBcUIsV0FBVywyQkFBMkIsV0FBVztBQUN0RSxLQUFLO0FBQ0wsZUFBZSxNQUFNLHdDQUF3QyxNQUFNO0FBQ25FLG1CQUFtQixTQUFTLCtCQUErQixVQUFVO0FBQ3JFLDhCQUE4QixNQUFNO0FBQ3BDLEdBQUc7QUFDSDtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCLDRCQUE0QixtQ0FBbUM7QUFDL0QscUJBQXFCLE1BQU0sZ0NBQWdDO0FBQzNELEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsTUFBTTtBQUMzQjtBQUNBLEdBQUc7QUFDSDtBQUNBLG1EQUFtRCxNQUFNO0FBQ3pELG9EQUFvRCxNQUFNO0FBQzFEO0FBQ0EsK0NBQStDLE1BQU07QUFDckQ7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9yZWFjdC1qc29uLWVkaXRvci1hanJtL2VzL2xvY2FsZS9lbi5qcz9kOTg5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgZm9ybWF0OiBcIntyZWFzb259IGF0IGxpbmUge2xpbmV9XCIsXG4gIHN5bWJvbHM6IHtcbiAgICBjb2xvbjogXCJjb2xvblwiLFxuICAgIC8vIDpcbiAgICBjb21tYTogXCJjb21tYVwiLFxuICAgIC8vICwgINiMICDjgIFcbiAgICBzZW1pY29sb246IFwic2VtaWNvbG9uXCIsXG4gICAgLy8gO1xuICAgIHNsYXNoOiBcInNsYXNoXCIsXG4gICAgLy8gLyAgcmVsZXZhbnQgZm9yIGNvbW1lbnQgc3ludGF4IHN1cHBvcnRcbiAgICBiYWNrc2xhc2g6IFwiYmFja3NsYXNoXCIsXG4gICAgLy8gXFwgIHJlbGV2YW50IGZvciBlc2NhcGluZyBjaGFyYWN0ZXJcbiAgICBicmFja2V0czoge1xuICAgICAgcm91bmQ6IFwicm91bmQgYnJhY2tldHNcIixcbiAgICAgIC8vICggKVxuICAgICAgc3F1YXJlOiBcInNxdWFyZSBicmFja2V0c1wiLFxuICAgICAgLy8gWyBdXG4gICAgICBjdXJseTogXCJjdXJseSBicmFja2V0c1wiLFxuICAgICAgLy8geyB9XG4gICAgICBhbmdsZTogXCJhbmdsZSBicmFja2V0c1wiIC8vIDwgPlxuXG4gICAgfSxcbiAgICBwZXJpb2Q6IFwicGVyaW9kXCIsXG4gICAgLy8gLiBBbHNvIGtub3duIGFzIGZ1bGwgcG9pbnQsIGZ1bGwgc3RvcCwgb3IgZG90XG4gICAgcXVvdGVzOiB7XG4gICAgICBzaW5nbGU6IFwic2luZ2xlIHF1b3RlXCIsXG4gICAgICAvLyAnXG4gICAgICBkb3VibGU6IFwiZG91YmxlIHF1b3RlXCIsXG4gICAgICAvLyBcIlxuICAgICAgZ3JhdmU6IFwiZ3JhdmUgYWNjZW50XCIgLy8gYCB1c2VkIG9uIEphdmFzY3JpcHQgRVM2IFN5bnRheCBmb3IgU3RyaW5nIFRlbXBsYXRlc1xuXG4gICAgfSxcbiAgICBzcGFjZTogXCJzcGFjZVwiLFxuICAgIC8vICAg4oCCICDigINcbiAgICBhbXBlcnNhbmQ6IFwiYW1wZXJzYW5kXCIsXG4gICAgLy9cdCZcbiAgICBhc3RlcmlzazogXCJhc3Rlcmlza1wiLFxuICAgIC8vXHQqICByZWxldmFudCBmb3Igc29tZSBjb21tZW50IHN5dGFueFxuICAgIGF0OiBcImF0IHNpZ25cIixcbiAgICAvL1x0QCAgbXVsdGlwbGUgdXNlcyBpbiBvdGhlciBjb2RpbmcgbGFuZ3VhZ2VzIGluY2x1ZGluZyBjZXJ0YWluIGRhdGEgdHlwZXNcbiAgICBlcXVhbHM6IFwiZXF1YWxzIHNpZ25cIixcbiAgICAvL1x0PVxuICAgIGhhc2g6IFwiaGFzaFwiLFxuICAgIC8vXHQjXG4gICAgcGVyY2VudDogXCJwZXJjZW50XCIsXG4gICAgLy9cdCVcbiAgICBwbHVzOiBcInBsdXNcIixcbiAgICAvL1x0K1xuICAgIG1pbnVzOiBcIm1pbnVzXCIsXG4gICAgLy9cdOKIklxuICAgIGRhc2g6IFwiZGFzaFwiLFxuICAgIC8vXHTiiJJcbiAgICBoeXBoZW46IFwiaHlwaGVuXCIsXG4gICAgLy9cdOKIklxuICAgIHRpbGRlOiBcInRpbGRlXCIsXG4gICAgLy9cdH5cbiAgICB1bmRlcnNjb3JlOiBcInVuZGVyc2NvcmVcIixcbiAgICAvL1x0X1xuICAgIGJhcjogXCJ2ZXJ0aWNhbCBiYXJcIiAvL1x0fFxuXG4gIH0sXG4gIHR5cGVzOiB7XG4gICAga2V5OiBcImtleVwiLFxuICAgIHZhbHVlOiBcInZhbHVlXCIsXG4gICAgbnVtYmVyOiBcIm51bWJlclwiLFxuICAgIHN0cmluZzogXCJzdHJpbmdcIixcbiAgICBwcmltaXRpdmU6IFwicHJpbWl0aXZlXCIsXG4gICAgYm9vbGVhbjogXCJib29sZWFuXCIsXG4gICAgY2hhcmFjdGVyOiBcImNoYXJhY3RlclwiLFxuICAgIGludGVnZXI6IFwiaW50ZWdlclwiLFxuICAgIGFycmF5OiBcImFycmF5XCIsXG4gICAgZmxvYXQ6IFwiZmxvYXRcIiAvLy4uLiBSZWZlcmVuY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfZGF0YV9zdHJ1Y3R1cmVzXG5cbiAgfSxcbiAgaW52YWxpZFRva2VuOiB7XG4gICAgdG9rZW5TZXF1ZW5jZToge1xuICAgICAgcHJvaGliaXRlZDogXCIne2ZpcnN0VG9rZW59JyB0b2tlbiBjYW5ub3QgYmUgZm9sbG93ZWQgYnkgJ3tzZWNvbmRUb2tlbn0nIHRva2VuKHMpXCIsXG4gICAgICBwZXJtaXR0ZWQ6IFwiJ3tmaXJzdFRva2VufScgdG9rZW4gY2FuIG9ubHkgYmUgZm9sbG93ZWQgYnkgJ3tzZWNvbmRUb2tlbn0nIHRva2VuKHMpXCJcbiAgICB9LFxuICAgIHRlcm1TZXF1ZW5jZToge1xuICAgICAgcHJvaGliaXRlZDogXCJBIHtmaXJzdFRlcm19IGNhbm5vdCBiZSBmb2xsb3dlZCBieSBhIHtzZWNvbmRUZXJtfVwiLFxuICAgICAgcGVybWl0dGVkOiBcIkEge2ZpcnN0VGVybX0gY2FuIG9ubHkgYmUgZm9sbG93ZWQgYnkgYSB7c2Vjb25kVGVybX1cIlxuICAgIH0sXG4gICAgZG91YmxlOiBcIid7dG9rZW59JyB0b2tlbiBjYW5ub3QgYmUgZm9sbG93ZWQgYnkgYW5vdGhlciAne3Rva2VufScgdG9rZW5cIixcbiAgICB1c2VJbnN0ZWFkOiBcIid7YmFkVG9rZW59JyB0b2tlbiBpcyBub3QgYWNjZXB0ZWQuIFVzZSAne2dvb2RUb2tlbn0nIGluc3RlYWRcIixcbiAgICB1bmV4cGVjdGVkOiBcIlVuZXhwZWN0ZWQgJ3t0b2tlbn0nIHRva2VuIGZvdW5kXCJcbiAgfSxcbiAgYnJhY2U6IHtcbiAgICBjdXJseToge1xuICAgICAgbWlzc2luZ09wZW46IFwiTWlzc2luZyAneycgb3BlbiBjdXJseSBicmFjZVwiLFxuICAgICAgbWlzc2luZ0Nsb3NlOiBcIk9wZW4gJ3snIGN1cmx5IGJyYWNlIGlzIG1pc3NpbmcgY2xvc2luZyAnfScgY3VybHkgYnJhY2VcIixcbiAgICAgIGNhbm5vdFdyYXA6IFwiJ3t0b2tlbn0nIHRva2VuIGNhbm5vdCBiZSB3cmFwcGVkIGluICd7fScgY3VybHkgYnJhY2VzXCJcbiAgICB9LFxuICAgIHNxdWFyZToge1xuICAgICAgbWlzc2luZ09wZW46IFwiTWlzc2luZyAnWycgb3BlbiBzcXVhcmUgYnJhY2VcIixcbiAgICAgIG1pc3NpbmdDbG9zZTogXCJPcGVuICdbJyBzcXVhcmUgYnJhY2UgaXMgbWlzc2luZyBjbG9zaW5nICddJyBzcXVhcmUgYnJhY2VcIixcbiAgICAgIGNhbm5vdFdyYXA6IFwiJ3t0b2tlbn0nIHRva2VuIGNhbm5vdCBiZSB3cmFwcGVkIGluICdbXScgc3F1YXJlIGJyYWNlc1wiXG4gICAgfVxuICB9LFxuICBzdHJpbmc6IHtcbiAgICBtaXNzaW5nT3BlbjogXCJNaXNzaW5nL2ludmFsaWQgb3BlbmluZyBzdHJpbmcgJ3txdW90ZX0nIHRva2VuXCIsXG4gICAgbWlzc2luZ0Nsb3NlOiBcIk1pc3NpbmcvaW52YWxpZCBjbG9zaW5nIHN0cmluZyAne3F1b3RlfScgdG9rZW5cIixcbiAgICBtdXN0QmVXcmFwcGVkQnlRdW90ZXM6IFwiU3RyaW5ncyBtdXN0IGJlIHdyYXBwZWQgYnkgcXVvdGVzXCIsXG4gICAgbm9uQWxwaGFudW1lcmljOiBcIk5vbi1hbHBoYW51bWVyaWMgdG9rZW4gJ3t0b2tlbn0nIGlzIG5vdCBhbGxvd2VkIG91dHNpZGUgc3RyaW5nIG5vdGF0aW9uXCIsXG4gICAgdW5leHBlY3RlZEtleTogXCJVbmV4cGVjdGVkIGtleSBmb3VuZCBhdCBzdHJpbmcgcG9zaXRpb25cIlxuICB9LFxuICBrZXk6IHtcbiAgICBudW1iZXJBbmRMZXR0ZXJNaXNzaW5nUXVvdGVzOiBcIktleSBiZWdpbm5pbmcgd2l0aCBudW1iZXIgYW5kIGNvbnRhaW5pbmcgbGV0dGVycyBtdXN0IGJlIHdyYXBwZWQgYnkgcXVvdGVzXCIsXG4gICAgc3BhY2VNaXNzaW5nUXVvdGVzOiBcIktleSBjb250YWluaW5nIHNwYWNlIG11c3QgYmUgd3JhcHBlZCBieSBxdW90ZXNcIixcbiAgICB1bmV4cGVjdGVkU3RyaW5nOiBcIlVuZXhwZWN0ZWQgc3RyaW5nIGZvdW5kIGF0IGtleSBwb3NpdGlvblwiXG4gIH0sXG4gIG5vVHJhaWxpbmdPckxlYWRpbmdDb21tYTogXCJUcmFpbGluZyBvciBsZWFkaW5nIGNvbW1hcyBpbiBhcnJheXMgYW5kIG9iamVjdHMgYXJlIG5vdCBwZXJtaXR0ZWRcIlxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/locale/en.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/locale/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-json-editor-ajrm/es/locale/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   format: function() { return /* binding */ format; }\n/* harmony export */ });\n// Allows us to pass arrays and numbers instead of just strings to the format function.\nconst stringify = arg => Array.isArray(arg) ? arg.join(\", \") : typeof arg === \"string\" ? arg : \"\" + arg; // Replaces a string with the values of an object. Google \"format unicorn\" on an explanation of how to use.\n\n\nconst format = (str, args) => args ? Object.keys(args).reduce((str, arg) => str.replace(new RegExp(`\\\\{${arg}\\\\}`, 'gi'), stringify(args[arg])), str) : str;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1qc29uLWVkaXRvci1hanJtL2VzL2xvY2FsZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSx5R0FBeUc7OztBQUd6Ryx1R0FBdUcsRUFBRSxJQUFJLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWpzb24tZWRpdG9yLWFqcm0vZXMvbG9jYWxlL2luZGV4LmpzP2FkNmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQWxsb3dzIHVzIHRvIHBhc3MgYXJyYXlzIGFuZCBudW1iZXJzIGluc3RlYWQgb2YganVzdCBzdHJpbmdzIHRvIHRoZSBmb3JtYXQgZnVuY3Rpb24uXG5jb25zdCBzdHJpbmdpZnkgPSBhcmcgPT4gQXJyYXkuaXNBcnJheShhcmcpID8gYXJnLmpvaW4oXCIsIFwiKSA6IHR5cGVvZiBhcmcgPT09IFwic3RyaW5nXCIgPyBhcmcgOiBcIlwiICsgYXJnOyAvLyBSZXBsYWNlcyBhIHN0cmluZyB3aXRoIHRoZSB2YWx1ZXMgb2YgYW4gb2JqZWN0LiBHb29nbGUgXCJmb3JtYXQgdW5pY29yblwiIG9uIGFuIGV4cGxhbmF0aW9uIG9mIGhvdyB0byB1c2UuXG5cblxuY29uc3QgZm9ybWF0ID0gKHN0ciwgYXJncykgPT4gYXJncyA/IE9iamVjdC5rZXlzKGFyZ3MpLnJlZHVjZSgoc3RyLCBhcmcpID0+IHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoYFxcXFx7JHthcmd9XFxcXH1gLCAnZ2knKSwgc3RyaW5naWZ5KGFyZ3NbYXJnXSkpLCBzdHIpIDogc3RyO1xuXG5leHBvcnQgeyBmb3JtYXQgfTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/locale/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/mitsuketa/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-json-editor-ajrm/es/mitsuketa/index.js ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\r\n * @author Andrew Redican <andrew.redican.mejia@gmail.com>\r\n */\n\n/**\r\n * Performs deep search on object tree, removes all properties with matching key, returns a new identity without the specified property\r\n * @param {Any} identity\r\n * @param {string} keyName\r\n * @param {Optional Number} maxDepth\r\n * @return {Any} identity\r\n */\nfunction deepRemoveAll_Key(identity, keyName, maxDepth) {\n  if (getType(keyName) !== 'string') return undefined;\n  if (keyName === '') return undefined;\n  let clonedIdentity = deepClone(identity);\n  var paths = locateAll_Key(clonedIdentity, keyName, maxDepth);\n  if (paths === [] || paths === false) return clonedIdentity;\n  paths.forEach(path => {\n    if (path === '') path = keyName;else path += '.' + keyName;\n    path = path.split('.');\n    var ref = clonedIdentity;\n    if (!Array.isArray(path)) delete ref[path];\n\n    for (var i = 0; i < path.length; i++) {\n      var key = path[i];\n\n      if (key in ref) {\n        if (i < path.length - 1) ref = ref[key];else delete ref[key];\n      } else break;\n    }\n  });\n  return clonedIdentity;\n}\n/**\r\n * Performs deep search on object tree, removes the first property with matching key, returns a new identity without the specified property\r\n * @param {Any} identity\r\n * @param {string} keyName\r\n * @param {Optional Number} maxDepth\r\n * @return {Any} identity\r\n */\n\n\nfunction deepRemove_Key(identity, keyName, maxDepth) {\n  if (getType(keyName) !== 'string') return undefined;\n  if (keyName === '') return undefined;\n  let clonedIdentity = deepClone(identity);\n  var path = locate_Key(clonedIdentity, keyName, maxDepth);\n  if (path === false) return clonedIdentity;\n  if (path === '') path = keyName;else path += '.' + keyName;\n  path = path.split('.');\n  var ref = clonedIdentity;\n  if (!Array.isArray(path)) delete ref[path];\n  path.forEach((key, i) => {\n    if (i < path.length - 1) ref = ref[key];else delete ref[key];\n  });\n  return clonedIdentity;\n}\n/**\r\n * Performs deep search on object tree, and renames the all matching keys\r\n * @param {Any} identity\r\n * @param {string} keyName\r\n * @param {string} newKeyName\r\n * @param {Optional Number} maxDepth\r\n * @return {Any} identity\r\n */\n\n\nfunction renameKeys(identity, keyName, newKeyName, maxDepth = null) {\n  if (getType(keyName) !== 'string') return undefined;\n  if (getType(newKeyName) !== 'string') return undefined;\n  if (keyName === '') return undefined;\n  if (newKeyName === '') return undefined;\n\n  function _renameKeys(identity, keyName, newKeyName, maxDepth, currentDepth = 0) {\n    let keys;\n\n    switch (getType(identity)) {\n      case 'array':\n        var Arr = [];\n        keys = Object.keys(identity);\n\n        for (var i = 0, l = keys.length; i < l; i++) {\n          let key = keys[i],\n              subIdentity = identity[key];\n          Arr[key] = _renameKeys(subIdentity, keyName, newKeyName, maxDepth, currentDepth + 1);\n        }\n\n        return Arr;\n\n      case 'object':\n        var Obj = {};\n        keys = Object.keys(identity);\n\n        for (var i = 0, l = keys.length; i < l; i++) {\n          let key = keys[i],\n              subIdentity = identity[key];\n          if (maxDepth !== null ? currentDepth < maxDepth : true) if (key === keyName) key = newKeyName;\n          Obj[key] = _renameKeys(subIdentity, keyName, newKeyName, maxDepth, currentDepth + 1);\n        }\n\n        return Obj;\n\n      case 'string':\n        return '' + identity;\n\n      case 'number':\n        return 0 + identity;\n\n      case 'boolean':\n        if (identity) return true;\n        return false;\n\n      case 'null':\n        return null;\n\n      case 'undefined':\n        return undefined;\n    }\n  }\n\n  return _renameKeys(identity, keyName, newKeyName, maxDepth, 0);\n}\n/**\r\n * Performs deep search on object tree, then renames the first matching key\r\n * @param {Any} identity\r\n * @param {string} keyName\r\n * @param {string} newKeyName\r\n * @param {Optional Number} maxDepth\r\n * @return {Any} identity\r\n */\n\n\nfunction renameKey(identity, keyName, newKeyName, maxDepth = null) {\n  if (getType(keyName) !== 'string') return undefined;\n  if (getType(newKeyName) !== 'string') return undefined;\n  if (keyName === '') return undefined;\n  if (newKeyName === '') return undefined;\n  var applied = false;\n\n  function _renameKey(identity, keyName, newKeyName, maxDepth, currentDepth = 0) {\n    let keys;\n\n    switch (getType(identity)) {\n      case 'array':\n        var Arr = [];\n        keys = Object.keys(identity);\n\n        for (var i = 0, l = keys.length; i < l; i++) {\n          let key = keys[i],\n              subIdentity = identity[key];\n          Arr[key] = _renameKey(subIdentity, keyName, newKeyName, maxDepth, currentDepth + 1);\n        }\n\n        return Arr;\n\n      case 'object':\n        var Obj = {};\n        keys = Object.keys(identity);\n\n        for (var i = 0, l = keys.length; i < l; i++) {\n          let key = keys[i],\n              subIdentity = identity[key];\n          if (maxDepth !== null ? currentDepth < maxDepth : true) if (!applied) if (key === keyName) {\n            key = newKeyName;\n            applied = true;\n          }\n          Obj[key] = _renameKey(subIdentity, keyName, newKeyName, maxDepth, currentDepth + 1);\n        }\n\n        return Obj;\n\n      case 'string':\n        return '' + identity;\n\n      case 'number':\n        return 0 + identity;\n\n      case 'boolean':\n        if (identity) return true;\n        return false;\n\n      case 'null':\n        return null;\n\n      case 'undefined':\n        return undefined;\n    }\n  }\n\n  return _renameKey(identity, keyName, newKeyName, maxDepth, 0);\n}\n/**\r\n * Creates a non-reference clone that is an exact copy to the identity provided.\r\n * @param {Any} identity\r\n * @param {Optional Number} maxDepth\r\n * @param {Optional Number} startDepth\r\n * @return {Any} identity\r\n */\n\n\nfunction deepClone(identity, maxDepth = null, startDepth = null) {\n  var R = [];\n\n  function _deepClone(identity, maxDepth, startDepth, currentDepth = 0) {\n    let keys;\n\n    if (startDepth !== null ? currentDepth < startDepth : false) {\n      if (isIterable(identity)) {\n        keys = Object.keys(identity);\n        keys.forEach(key => {\n          _deepClone(identity[key], maxDepth, startDepth, currentDepth + 1);\n        });\n      }\n\n      return;\n    }\n\n    if (startDepth !== null ? currentDepth == startDepth : false) {\n      if (startDepth == 0) {\n        R = _deepClone(identity, maxDepth, null, currentDepth);\n        return;\n      }\n\n      if (isIterable(identity)) R.push(_deepClone(identity, maxDepth, startDepth, currentDepth + 1));\n      return;\n    }\n\n    switch (getType(identity)) {\n      case 'array':\n        var Arr = [];\n        keys = Object.keys(identity);\n        if (maxDepth !== null ? currentDepth < maxDepth : true) for (var i = 0, l = keys.length; i < l; i++) {\n          const key = keys[i],\n                subIdentity = identity[key];\n          Arr[key] = _deepClone(subIdentity, maxDepth, startDepth, currentDepth + 1);\n        }\n        return Arr;\n\n      case 'object':\n        var Obj = {};\n        keys = Object.keys(identity);\n        if (maxDepth !== null ? currentDepth < maxDepth : true) for (var i = 0, l = keys.length; i < l; i++) {\n          const key = keys[i],\n                subIdentity = identity[key];\n          Obj[key] = _deepClone(subIdentity, maxDepth, startDepth, currentDepth + 1);\n        }\n        return Obj;\n\n      case 'string':\n        return '' + identity;\n\n      case 'number':\n        return 0 + identity;\n\n      case 'boolean':\n        if (identity) return true;\n        return false;\n\n      case 'null':\n        return null;\n\n      case 'undefined':\n        return undefined;\n    }\n  }\n\n  if (startDepth === null) return _deepClone(identity, maxDepth, startDepth, 0);\n\n  _deepClone(identity, maxDepth, startDepth, 0);\n\n  return R;\n}\n/**\r\n * Performs deep search on collection to find all matches to the key name, and returns a list of identities containing the matched instances. If no matches found, it returns `undefined`.\r\n * @param {Any} collection\r\n * @param {Any} keyName\r\n * @param {Optional Number} maxDepth\r\n * @return {Array || undefined} Identities\r\n */\n\n\nfunction deepFilter_Key(collection, keyName, maxDepth = null) {\n  if (getType(keyName) !== 'string') return undefined;\n  if (keyName === '') return undefined;\n  var paths = locateAll_Key(collection, keyName, maxDepth);\n  if (paths === false) return undefined;\n  const results = paths.map(path => {\n    if (path === false) return undefined;\n    if (path === '') path = keyName;else path += '.' + keyName;\n    path = path.split('.');\n    var result = collection;\n    if (!Array.isArray(path)) return result[path];\n    path.forEach(key => {\n      result = result[key];\n    });\n    return result;\n  });\n  return results;\n}\n/**\r\n * Performs deep search on collection to find all matches to the key name, returns the location of each match in a string array. If no matches found, it returns `false`.\r\n * @param {Any} collection\r\n * @param {Any} keyName\r\n * @param {Optional Number} maxDepth\r\n * @return {Array || false} Paths\r\n */\n\n\nfunction locateAll_Key(collection, keyName, maxDepth = null) {\n  if (getType(keyName) !== 'string') return undefined;\n  if (keyName === '') return undefined;\n  var R = [];\n\n  function _locateAll_Key(collection, keyName, xKey = '', path = '', maxDepth = null, currentDepth = 0) {\n    if (xKey === keyName) R[R.length] = path;\n    var result = false;\n    if (maxDepth !== null) if (currentDepth >= maxDepth) return result;\n    if (isIterable(collection)) for (var i = 0, keys = Object.keys(collection), l = keys.length; i < l; i++) {\n      const key = keys[i],\n            subcollection = collection[key];\n\n      _locateAll_Key(subcollection, keyName, key, (path === '' ? path : path + '.') + key, maxDepth, currentDepth + 1);\n    }\n  }\n\n  _locateAll_Key(collection, keyName, '', '', maxDepth);\n\n  R = R.map(path => {\n    if (getType(path) === 'boolean') return path;\n    if (path === '') return path;\n    path = path.split('.');\n    path.pop();\n    path = path.join('.');\n    return path;\n  });\n  return R.length === 0 ? false : R;\n}\n/**\r\n * Performs deep search on collection to find a match to the key name, and returns the first identity containing the match. If no match found, it returns `undefined`.\r\n * @param {Any} collection\r\n * @param {Any} keyName\r\n * @param {Optional number} maxDepth\r\n * @return {Identity || undefined} identity\r\n */\n\n\nfunction deepGet_Key(collection, keyName, maxDepth = null) {\n  if (getType(keyName) !== 'string') return undefined;\n  if (keyName === '') return undefined;\n  var path = locate_Key(collection, keyName, maxDepth);\n  if (path === false) return undefined;\n  if (path === '') path = keyName;else path += '.' + keyName;\n  path = path.split('.');\n  var result = collection;\n  if (!Array.isArray(path)) return result[path];\n  path.forEach(key => {\n    result = result[key];\n  });\n  return result;\n}\n/**\r\n * Performs deep search on collection to find a match to the key name, will return the path of the first instance matched. If no match found, it returns `false`.\r\n * @param {Any} collection\r\n * @param {Any} keyName\r\n * @param {Optional number} maxDepth\r\n * @return {String || false} Path\r\n */\n\n\nfunction locate_Key(collection, keyName, maxDepth = null) {\n  if (getType(keyName) !== 'string') return undefined;\n  if (keyName === '') return undefined;\n\n  function _locate_Key(collection, keyName, path = '', maxDepth, currentDepth = 0) {\n    if (path === keyName) return path;\n    var result = false;\n    if (maxDepth !== null) if (currentDepth >= maxDepth) return result;\n    if (isIterable(collection)) for (var i = 0, keys = Object.keys(collection), l = keys.length; i < l; i++) {\n      const key = keys[i],\n            subcollection = collection[key],\n            res = _locate_Key(subcollection, keyName, key, maxDepth, currentDepth + 1);\n\n      if (res) {\n        path = path === '' ? path : path + '.';\n        result = path + res;\n        break;\n      }\n    }\n    return result;\n  }\n\n  var path = _locate_Key(collection, keyName, '', maxDepth, 0);\n\n  if (getType(path) === 'boolean') return path;\n  if (path === '') return path;\n  path = path.split('.');\n  path.pop();\n  path = path.join('.');\n  return path;\n}\n/**\r\n * Performs deep search for identity on collection to return the location's depth of the first match. If no match found, it returns `false`.\r\n * @param {Any} collection\r\n * @param {Any} identity\r\n * @param {Optional Number} maxDepth\r\n * @return {boolean}\r\n */\n\n\nfunction matchDepth(collection, identity, maxDepth = null) {\n  var path = locate(collection, identity, maxDepth);\n  if (path === false) return false;\n  if (path === '') return 0;\n  path = path.split('.');\n  return path.length;\n}\n/**\r\n * Walks through the entire object tree to return the maximum number of layers it contains.\r\n * @param {Any} identity\r\n * @param {Optional Number} maxDepth\r\n */\n\n\nfunction maxDepth(identity, maxLayer = null) {\n  let R = 0;\n\n  function _maxDepth(identity, maxLayer, currentDepth = 0) {\n    if (R < currentDepth) R = currentDepth;\n    if (maxLayer !== null) if (currentDepth >= maxLayer) return;\n\n    if (isIterable(identity)) {\n      var keys = Object.keys(identity);\n      keys.forEach(key => {\n        var subIdentity = identity[key];\n\n        _maxDepth(subIdentity, maxLayer, currentDepth + 1);\n      });\n    }\n  }\n\n  _maxDepth(identity, maxLayer);\n\n  return R;\n}\n/**\r\n * Performs deep search for identity on collection, returns the number of matches found.\r\n * @param {Any} collection\r\n * @param {Any} identity\r\n * @param {Number} nthDepth\r\n * @param {Optional Number} maxDepth\r\n * @return {Any} Returns number of matches found.\r\n */\n\n\nfunction countMatches(collection, identity, nthDepth = null, maxDepth = null) {\n  var depth,\n      nthDepth_isNull = nthDepth === null,\n      maxDepth_isNull = maxDepth === null;\n  if (nthDepth_isNull && maxDepth_isNull) depth = null;else if (!nthDepth_isNull && !maxDepth_isNull) {\n    if (nthDepth < maxDepth) depth = nthDepth;else depth = maxDepth;\n  } else if (nthDepth) depth = nthDepth;else depth = maxDepth;\n  var paths = locateAll(collection, identity, depth);\n  if (paths === false) return 0;\n  if (nthDepth === null) return paths.length;\n\n  if (getType(nthDepth) === 'number') {\n    let count = 0;\n    paths.forEach(path => {\n      path = path.split('.');\n      if (path.length === nthDepth) count++;\n    });\n    return count;\n  }\n\n  return undefined;\n}\n/**\r\n* Performs deep search for each identity on collection, to shorten the identities to those that meets the match criteria\r\n* @param {Any} collection\r\n* @param {Any} identities\r\n* @param {Any} property\r\n* @param {Optional Number} maxDepth\r\n* @return {Any} Returns a collection of the same type as the 'identities' parameter provided with only the identities that matched.\r\n*/\n\n\nfunction onlyFalsy(collection, identities, property, maxDepth = null) {\n  if (getType(identities) === 'array') {\n    let result = [];\n    identities.forEach(identity => {\n      const subCollection = deepFilter(collection, identity);\n      if (isTruthy(subCollection)) if (foundFalsy(subCollection, property, maxDepth)) result.push(identity);\n    });\n    return result;\n  }\n\n  if (getType(identities) === 'object') {\n    let result = {};\n    Object.keys(identities).forEach(key => {\n      const identity = identities[key],\n            subCollection = deepFilter(collection, identity);\n      if (isTruthy(subCollection)) if (foundFalsy(subCollection, property, maxDepth)) result[key] = identity;\n    });\n    return result;\n  }\n\n  if (foundFalsy(collection, property, maxDepth)) return identities;\n}\n/**\r\n * Performs deep search on collection to find any match to the property and evalutates if truthy\r\n * @param {Any} collection\r\n * @param {Property} identity\r\n * @param {Optional Number} maxDepth\r\n * @return {boolean} If match confirmed and truthy will return true, otherwise false\r\n */\n\n\nfunction foundFalsy(collection, identity, maxDepth = null) {\n  identity = singleProperty(identity);\n  if (isFalsy(identity)) return undefined;\n\n  function _foundFalsy(collection, identity, maxDepth, currentDepth = 0) {\n    if (containsKeys(collection, [identity])) return isFalsy(collection[identity]);\n    if (maxDepth !== null) if (currentDepth >= maxDepth) return false;\n    if (isIterable(collection)) for (var i = 0, keys = Object.keys(collection), l = keys.length; i < l; i++) {\n      const key = keys[i],\n            subcollection = collection[key],\n            res = _foundFalsy(subcollection, identity, maxDepth, currentDepth + 1);\n\n      if (res) return true;\n    }\n    return false;\n  }\n\n  return _foundFalsy(collection, identity, maxDepth);\n}\n/**\r\n * Performs deep search for each identity on collection, to shorten the identities to those that meets the match criteria\r\n * @param {Any} collection\r\n * @param {Any} identities\r\n * @param {Any} property\r\n * @param {Optional Number} maxDepth\r\n * @return {Any} Returns a collection of the same type as the 'identities' parameter provided with only the identities that matched.\r\n */\n\n\nfunction onlyTruthy(collection, identities, property, maxDepth = null) {\n  if (getType(identities) === 'array') {\n    let result = [];\n    identities.forEach(identity => {\n      const subCollection = deepFilter(collection, identity);\n      if (isTruthy(subCollection)) if (foundTruthy(subCollection, property, maxDepth)) result.push(identity);\n    });\n    return result;\n  }\n\n  if (getType(identities) === 'object') {\n    let result = {};\n    Object.keys(identities).forEach(key => {\n      const identity = identities[key],\n            subCollection = deepFilter(collection, identity);\n      if (isTruthy(subCollection)) if (foundTruthy(subCollection, property, maxDepth)) result[key] = identity;\n    });\n    return result;\n  }\n\n  if (foundTruthy(collection, property, maxDepth)) return identities;\n}\n/**\r\n * Performs deep search on collection to find any match to the property and evalutates if truthy\r\n * @param {Any} collection\r\n * @param {Property} identity\r\n * @param {Optional Number} maxDepth\r\n * @return {boolean} If match confirmed and truthy will return true, otherwise false\r\n */\n\n\nfunction foundTruthy(collection, identity, maxDepth = null) {\n  identity = singleProperty(identity);\n  if (isFalsy(identity)) return undefined;\n\n  function _foundTruthy(collection, identity, maxDepth, currentDepth = 0) {\n    if (containsKeys(collection, [identity])) return isTruthy(collection[identity]);\n    if (maxDepth !== null) if (currentDepth >= maxDepth) return false;\n    if (isIterable(collection)) for (var i = 0, keys = Object.keys(collection), l = keys.length; i < l; i++) {\n      const key = keys[i],\n            subcollection = collection[key],\n            res = _foundTruthy(subcollection, identity, maxDepth, currentDepth + 1);\n\n      if (res) return true;\n    }\n    return false;\n  }\n\n  return _foundTruthy(collection, identity, maxDepth, 0);\n}\n/**\r\n * Validates if identity is equal to a property definition or contains a single property key.\r\n * @param {Property} identity\r\n * @return {String || boolean} If criteria matched will return property name as string, otherwise false\r\n */\n\n\nfunction singleProperty(identity) {\n  const propCount = length(identity);\n  if (propCount > 1) return false;\n  if (propCount === 1) return Object.keys(identity)[0];\n  if (propCount === 0) if (['string', 'number'].indexOf(getType(identity)) > -1) return identity;\n  return false;\n}\n/**\r\n * Determines if identity is non-falsy\r\n * @param {Any} identity\r\n * @return {boolean} Returns true if criteria matched, otherwise false.\r\n */\n\n\nfunction isTruthy(identity) {\n  return !isFalsy(identity);\n}\n/**\r\n * Determines if identity is falsy\r\n * @param {Any} identity\r\n * @return {boolean} Returns true if criteria matched, otherwise false.\r\n */\n\n\nfunction isFalsy(identity) {\n  if (falser(identity) === false) return true;\n  return false;\n}\n/**\r\n * Converts false-like values into actual boolean value of false\r\n * @param {Any} identity\r\n * @return {Any || boolean} Returns false is value is falsy, otherwise returns original value.\r\n */\n\n\nfunction falser(identity) {\n  if (isIterable(identity)) return identity;\n  if (['null', 'undefined'].indexOf(getType(identity)) > -1) return false;\n  if (['', 0, false].indexOf(identity) > -1) return false;\n  return identity;\n}\n/**\r\n * Check the length of the top-most depth of the identity\r\n * @param {Any} identity\r\n * @return {integer} Greater than or equal to 0.\r\n */\n\n\nfunction length(identity) {\n  if (['array', 'object'].indexOf(getType(identity)) === -1) return 0;\n  return Object.keys(identity).length;\n}\n/**\r\n * Performs deep search for each identity on collection, to shorten the identities to those that does meets the match criteria\r\n * @param {Any} collection\r\n * @param {Any} identities\r\n * @param {Optional Number} maxDepth\r\n * @return {Any} Returns a collection of the same type as the 'identities' parameter provided with only the identities that were not matched.\r\n */\n\n\nfunction onlyMissing(collection, identities, maxDepth = null) {\n  if (getType(identities) === 'array') {\n    let result = [];\n    identities.forEach(identity => {\n      if (!exists(collection, identity, maxDepth)) result.push(identity);\n    });\n    return result;\n  }\n\n  if (getType(identities) === 'object') {\n    let result = {};\n    Object.keys(identities).forEach(key => {\n      let identity = identities[key];\n      if (!exists(collection, identity, maxDepth)) result[key] = identity;\n    });\n    return result;\n  }\n\n  if (!exists(collection, identities, maxDepth)) return identities;\n}\n/**\r\n * Performs deep search for each identity on collection, to shorten the identities to those that meets the match criteria\r\n * @param {Any} collection\r\n * @param {Any} identities\r\n * @param {Optional Number} maxDepth\r\n * @return {Any} Returns a collection of the same type as the 'identities' parameter provided with only the identities that matched.\r\n */\n\n\nfunction onlyExisting(collection, identities, maxDepth = null) {\n  if (getType(identities) === 'array') {\n    let result = [];\n    identities.forEach(identity => {\n      if (exists(collection, identity, maxDepth)) result.push(identity);\n    });\n    return result;\n  }\n\n  if (getType(identities) === 'object') {\n    let result = {};\n    Object.keys(identities).forEach(key => {\n      let identity = identities[key];\n      if (exists(collection, identity, maxDepth)) result[key] = identity;\n    });\n    return result;\n  }\n\n  if (exists(collection, identities, maxDepth)) return identities;\n}\n/**\r\n * Performs deep search on collection to find any match to the identity\r\n * @param {Any} collection\r\n * @param {Any} identity\r\n * @param {Optional Number} maxDepth\r\n * @return {boolean} If a match is confirmed will return true, otherwise false\r\n */\n\n\nfunction exists(collection, identity, maxDepth = null, currentDepth = 0) {\n  if (identical(collection, identity)) return true;\n  if (isIterable(identity)) if (sameType(collection, identity)) if (containsKeys(collection, Object.keys(identity))) {\n    const trimmed = trim(collection, Object.keys(identity));\n    if (identical(trimmed, identity)) return true;\n  }\n  if (maxDepth === null ? true : currentDepth < maxDepth) if (isIterable(collection)) for (var i = 0, keys = Object.keys(collection), l = keys.length; i < l; i++) {\n    const key = keys[i],\n          subcollection = collection[key],\n          res = exists(subcollection, identity, maxDepth, currentDepth + 1);\n    if (res) return true;\n  }\n  return false;\n}\n/**\r\n * Performs deep search on collection to find all matches to the identity, will return a list of identities containing the match. If no matches found, it returns `undefined`.\r\n * @param {Any} collection\r\n * @param {Any} identity\r\n * @param {Optional Number} maxDepth\r\n * @return {Array || undefined} identities\r\n */\n\n\nfunction deepFilter(collection, identity, maxDepth = null) {\n  var paths = locateAll(collection, identity, maxDepth);\n  if (paths === false) return undefined;\n  const results = paths.map(path => {\n    if (path === '') return collection;\n    path = path.split('.');\n    if (['array', 'object'].indexOf(getType(identity)) === -1) path.splice(-1, 1);\n    var result = collection;\n    if (!Array.isArray(path)) return result[path];\n    path.forEach(key => {\n      result = result[key];\n    });\n    return result;\n  });\n  return results;\n}\n/**\r\n * Performs deep search on collection to find all matches to the identity, returns a string array containing the location of all matches. If no matches found, it returns `false`.\r\n * @param {Any} collection\r\n * @param {Any} identity\r\n * @param {Optional Number} maxDepth\r\n * @return {Array || false} Paths\r\n */\n\n\nfunction locateAll(collection, identity, maxDepth = null) {\n  var R = [];\n\n  function _locateAll(collection, identity, path = '', maxDepth, currentDepth) {\n    if (isIterable(identity)) if (sameType(collection, identity)) if (containsKeys(collection, Object.keys(identity))) {\n      const trimmed = trim(collection, Object.keys(identity));\n      if (identical(trimmed, identity)) R[R.length] = path;\n    }\n    if (identical(collection, identity)) R[R.length] = path;\n    var result = false;\n    if (maxDepth !== null) if (currentDepth >= maxDepth) return result;\n    if (isIterable(collection)) for (var i = 0, keys = Object.keys(collection), l = keys.length; i < l; i++) {\n      const key = keys[i],\n            subcollection = collection[key];\n\n      _locateAll(subcollection, identity, (path === '' ? path : path + '.') + key, maxDepth, currentDepth + 1);\n    }\n  }\n\n  _locateAll(collection, identity, '', maxDepth, 0);\n\n  return R.length === 0 ? false : R;\n}\n/**\r\n * Performs deep search on collection to find a match to the identity, will return the identity containing of the first instance matched. If no matches found, it returns `undefined`.\r\n * @param {Any} collection\r\n * @param {Any} identity\r\n * @param {Optional Number} maxDepth\r\n * @return {identity || undefined} identity\r\n */\n\n\nfunction deepGet(collection, identity, maxDepth = null) {\n  var path = locate(collection, identity, maxDepth);\n  if (path === false) return undefined;\n  if (path === '') return collection;\n  path = path.split('.');\n  if (['array', 'object'].indexOf(getType(identity)) === -1) path.splice(-1, 1);\n  var result = collection;\n  if (!Array.isArray(path)) return result[path];\n  path.forEach(key => {\n    result = result[key];\n  });\n  return result;\n}\n/**\r\n * Performs deep search on collection to find a match to the identity, will return the path of the first instance matched as string. If no matches found, returns `false`.\r\n * @param {Any} collection\r\n * @param {Any} identity\r\n * @param {Optional number} maxDepth\r\n * @return {string || false} path\r\n */\n\n\nfunction locate(collection, identity, maxDepth = null) {\n  function _locate(collection, identity, path = '', maxDepth, currentDepth) {\n    if (isIterable(identity)) if (sameType(collection, identity)) if (containsKeys(collection, Object.keys(identity))) {\n      const trimmed = trim(collection, Object.keys(identity));\n      if (identical(trimmed, identity)) return path;\n    }\n    if (identical(collection, identity)) return path;\n    var result = false;\n    if (maxDepth !== null) if (currentDepth >= maxDepth) return result;\n    if (isIterable(collection)) for (var i = 0, keys = Object.keys(collection), l = keys.length; i < l; i++) {\n      const key = keys[i],\n            subcollection = collection[key],\n            res = _locate(subcollection, identity, key, maxDepth, currentDepth + 1);\n\n      if (res) {\n        path = path === '' ? path : path + '.';\n        result = path + res;\n        break;\n      }\n    }\n    return result;\n  }\n\n  return _locate(collection, identity, '', maxDepth, 0);\n}\n/**\r\n * Trims an identity to only contain the specified properties.\r\n * @param {Any} identity\r\n * @param {Any} keyList\r\n * @return {Object or Array} Returns , otherwise false\r\n */\n\n\nfunction trim(identity, keyList) {\n  const identityType = getType(identity);\n  if (['array', 'object'].indexOf(identityType) === -1) return undefined;\n  const keyCount = keyList.length;\n  if (keyCount === 0) return undefined;\n  var newIdentity;\n\n  switch (identityType) {\n    case 'object':\n      newIdentity = {};\n      keyList.forEach(key => {\n        if (key in identity) newIdentity[key] = identity[key];\n      });\n      break;\n\n    case 'array':\n      newIdentity = [];\n      keyList.forEach(key => {\n        if (key in identity) newIdentity.push(identity[key]);\n      });\n      break;\n  }\n\n  return newIdentity;\n}\n/**\r\n * Check if identity contains all of the specified keys\r\n * @param {Any} identity\r\n * @param {Array} keyList\r\n * @return {boolean} true || false\r\n */\n\n\nfunction containsKeys(identity, keyList) {\n  const keyCount = keyList.length;\n  if (keyCount === 0 || !isIterable(identity)) return false;\n  const identitykeys = Object.keys(identity);\n  var result = true;\n\n  for (var i = 0; i < keyCount; i++) {\n    const key = '' + keyList[i];\n\n    if (identitykeys.indexOf(key) === -1) {\n      result = false;\n      break;\n    }\n  }\n\n  return result;\n}\n/**\r\n * Check if identity has one or more keys to iterate\r\n * @param {Any} identity\r\n * @return {boolean} true || false\r\n */\n\n\nfunction isIterable(identity) {\n  if (['array', 'object'].indexOf(getType(identity)) === -1) return false;\n  if (Object.keys(identity).length === 0) return false;\n  return true;\n}\n/**\r\n * Compares two identities, will return either true if identical, otherwise false.\r\n * @param {Any} identityA\r\n * @param {Any} identityB\r\n * @return {boolean} true || false\r\n */\n\n\nfunction identical(identityA, identityB) {\n  const structureMatch = sameStructure(identityA, identityB);\n  if (structureMatch === false) return structureMatch;\n  if (['array', 'object'].indexOf(structureMatch) === -1) return identityA === identityB;\n  const Keys = Object.keys(identityA),\n        KeyCount = Keys.length;\n  var childMatch = true;\n\n  for (var i = 0; i < KeyCount; i++) {\n    const Key = Keys[i],\n          identicalMatch = identical(identityA[Key], identityB[Key]);\n\n    if (identicalMatch === false) {\n      childMatch = identicalMatch;\n      break;\n    }\n\n    ;\n  }\n\n  return childMatch;\n}\n/**\r\n * Compares data structure of two identities, will return either the dataType or true/false.\r\n * @param {Any} identityA\r\n * @param {Any} identityB\r\n * @return {String || False} DataType as string for positive match, otherwise false\r\n */\n\n\nfunction sameStructure(identityA, identityB) {\n  const typeMatch = sameType(identityA, identityB);\n  if (typeMatch === false) return false;\n\n  if (['array', 'object'].indexOf(typeMatch) > -1) {\n    const AKeys = Object.keys(identityA),\n          BKeys = Object.keys(identityB),\n          AKeyCount = AKeys.length,\n          BKeyCount = BKeys.length;\n    if (!(AKeyCount === BKeyCount)) return false;\n    if (AKeyCount === 0) return true;\n\n    for (var i = 0; i < AKeyCount; i++) {\n      if (AKeys[i] !== BKeys[i]) return false;\n    }\n  }\n\n  return typeMatch;\n}\n/**\r\n * Compares data type of two identities, will dataType if true.\r\n * @param {Any} identityA\r\n * @param {Any} identityB\r\n * @return {boolean} true || false\r\n */\n\n\nfunction sameType(identityA, identityB) {\n  const typeA = getType(identityA);\n  return typeA === getType(identityB) ? typeA : false;\n}\n/**\r\n * Gets data type; makes distintion between object, array, and null.\r\n * @param {Any} identity\r\n * @return {String} dataType\r\n */\n\n\nfunction getType(identity) {\n  if (identity === null) return 'null';\n  const it = typeof identity;\n  if (it === 'object') if (Array.isArray(identity)) return 'array';\n  return it;\n}\n\nvar mitsuketa = {\n  getType: function (identity) {\n    return getType(identity);\n  },\n  sameType: function (identityA, identityB) {\n    return sameType(identityA, identityB);\n  },\n  sameStructure: function (identityA, identityB) {\n    return sameStructure(identityA, identityB);\n  },\n  identical: function (identityA, identityB) {\n    return identical(identityA, identityB);\n  },\n  isIterable: function (identity) {\n    return isIterable(identity);\n  },\n  containsKeys: function (identity, keyList) {\n    return containsKeys(identity, keyList);\n  },\n  trim: function (identity, keyList) {\n    return trim(identity, keyList);\n  },\n  locate: function (collection, identity, maxDepth) {\n    return locate(collection, identity, maxDepth);\n  },\n  deepGet: function (collection, identity, maxDepth) {\n    return deepGet(collection, identity, maxDepth);\n  },\n  locateAll: function (collection, identity, maxDepth) {\n    return locateAll(collection, identity, maxDepth);\n  },\n  deepFilter: function (collection, identity, maxDepth) {\n    return deepFilter(collection, identity, maxDepth);\n  },\n  exists: function (collection, identity, maxDepth) {\n    return exists(collection, identity, maxDepth);\n  },\n  onlyExisting: function (collection, identities, maxDepth) {\n    return onlyExisting(collection, identities, maxDepth);\n  },\n  onlyMissing: function (collection, identities, maxDepth) {\n    return onlyMissing(collection, identities, maxDepth);\n  },\n  length: function (identity) {\n    return length(identity);\n  },\n  isFalsy: function (identity) {\n    return isFalsy(identity);\n  },\n  isTruthy: function (identity) {\n    return isTruthy(identity);\n  },\n  foundTruthy: function (collection, identity, maxDepth) {\n    return foundTruthy(collection, identity, maxDepth);\n  },\n  onlyTruthy: function (collection, identities, property, maxDepth) {\n    return onlyTruthy(collection, identities, property, maxDepth);\n  },\n  foundFalsy: function (collection, identity, maxDepth) {\n    return foundFalsy(collection, identity, maxDepth);\n  },\n  onlyFalsy: function (collection, identities, property, maxDepth) {\n    return onlyFalsy(collection, identities, property, maxDepth);\n  },\n  countMatches: function (collection, identity, nthDepth, maxDepth) {\n    return countMatches(collection, identity, nthDepth, maxDepth);\n  },\n  matchDepth: function (collection, identity, maxDepth) {\n    return matchDepth(collection, identity, maxDepth);\n  },\n  maxDepth: function (identity, maxLayer) {\n    return maxDepth(identity, maxLayer);\n  },\n  locate_Key: function (collection, keyName, maxDepth) {\n    return locate_Key(collection, keyName, maxDepth);\n  },\n  deepGet_Key: function (collection, keyName, maxDepth) {\n    return deepGet_Key(collection, keyName, maxDepth);\n  },\n  locateAll_Key: function (collection, keyName, maxDepth) {\n    return locateAll_Key(collection, keyName, maxDepth);\n  },\n  deepFilter_Key: function (collection, keyName, maxDepth) {\n    return deepFilter_Key(collection, keyName, maxDepth);\n  },\n  deepClone: function (identity, maxDepth, startDepth) {\n    return deepClone(identity, maxDepth, startDepth);\n  },\n  renameKey: function (identity, keyName, newKeyName, maxDepth) {\n    return renameKey(identity, keyName, newKeyName, maxDepth);\n  },\n  renameKeys: function (identity, keyName, newKeyName, maxDepth) {\n    return renameKeys(identity, keyName, newKeyName, maxDepth);\n  },\n  deepRemove_Key: function (identity, keyName, maxDepth) {\n    return deepRemove_Key(identity, keyName, maxDepth);\n  },\n  deepRemoveAll_Key: function (identity, keyName, maxDepth) {\n    return deepRemoveAll_Key(identity, keyName, maxDepth);\n  }\n};\nmodule.exports = exports = mitsuketa;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/mitsuketa/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/themes.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-json-editor-ajrm/es/themes.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nconst dark_vscode_tribute = {\n  default: '#D4D4D4',\n  background: '#1E1E1E',\n  background_warning: '#1E1E1E',\n  string: '#CE8453',\n  number: '#B5CE9F',\n  colon: '#49B8F7',\n  keys: '#9CDCFE',\n  keys_whiteSpace: '#AF74A5',\n  primitive: '#6392C6'\n};\nconst light_mitsuketa_tribute = {\n  default: '#D4D4D4',\n  background: '#FCFDFD',\n  background_warning: '#FEECEB',\n  string: '#FA7921',\n  number: '#70CE35',\n  colon: '#49B8F7',\n  keys: '#59A5D8',\n  keys_whiteSpace: '#835FB6',\n  primitive: '#386FA4'\n};\nconst themes = {\n  dark_vscode_tribute: dark_vscode_tribute,\n  light_mitsuketa_tribute: light_mitsuketa_tribute\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (themes);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1qc29uLWVkaXRvci1hanJtL2VzL3RoZW1lcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUFlLE1BQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWpzb24tZWRpdG9yLWFqcm0vZXMvdGhlbWVzLmpzPzg4MzIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGFya192c2NvZGVfdHJpYnV0ZSA9IHtcbiAgZGVmYXVsdDogJyNENEQ0RDQnLFxuICBiYWNrZ3JvdW5kOiAnIzFFMUUxRScsXG4gIGJhY2tncm91bmRfd2FybmluZzogJyMxRTFFMUUnLFxuICBzdHJpbmc6ICcjQ0U4NDUzJyxcbiAgbnVtYmVyOiAnI0I1Q0U5RicsXG4gIGNvbG9uOiAnIzQ5QjhGNycsXG4gIGtleXM6ICcjOUNEQ0ZFJyxcbiAga2V5c193aGl0ZVNwYWNlOiAnI0FGNzRBNScsXG4gIHByaW1pdGl2ZTogJyM2MzkyQzYnXG59O1xuY29uc3QgbGlnaHRfbWl0c3VrZXRhX3RyaWJ1dGUgPSB7XG4gIGRlZmF1bHQ6ICcjRDRENEQ0JyxcbiAgYmFja2dyb3VuZDogJyNGQ0ZERkQnLFxuICBiYWNrZ3JvdW5kX3dhcm5pbmc6ICcjRkVFQ0VCJyxcbiAgc3RyaW5nOiAnI0ZBNzkyMScsXG4gIG51bWJlcjogJyM3MENFMzUnLFxuICBjb2xvbjogJyM0OUI4RjcnLFxuICBrZXlzOiAnIzU5QTVEOCcsXG4gIGtleXNfd2hpdGVTcGFjZTogJyM4MzVGQjYnLFxuICBwcmltaXRpdmU6ICcjMzg2RkE0J1xufTtcbmNvbnN0IHRoZW1lcyA9IHtcbiAgZGFya192c2NvZGVfdHJpYnV0ZTogZGFya192c2NvZGVfdHJpYnV0ZSxcbiAgbGlnaHRfbWl0c3VrZXRhX3RyaWJ1dGU6IGxpZ2h0X21pdHN1a2V0YV90cmlidXRlXG59O1xuZXhwb3J0IGRlZmF1bHQgdGhlbWVzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-json-editor-ajrm/es/themes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-json-editor-ajrm/locale/en.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-json-editor-ajrm/locale/en.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _default = {\n  format: \"{reason} at line {line}\",\n  symbols: {\n    colon: \"colon\",\n    // :\n    comma: \"comma\",\n    // ,  ،  、\n    semicolon: \"semicolon\",\n    // ;\n    slash: \"slash\",\n    // /  relevant for comment syntax support\n    backslash: \"backslash\",\n    // \\  relevant for escaping character\n    brackets: {\n      round: \"round brackets\",\n      // ( )\n      square: \"square brackets\",\n      // [ ]\n      curly: \"curly brackets\",\n      // { }\n      angle: \"angle brackets\" // < >\n\n    },\n    period: \"period\",\n    // . Also known as full point, full stop, or dot\n    quotes: {\n      single: \"single quote\",\n      // '\n      double: \"double quote\",\n      // \"\n      grave: \"grave accent\" // ` used on Javascript ES6 Syntax for String Templates\n\n    },\n    space: \"space\",\n    //       \n    ampersand: \"ampersand\",\n    //\t&\n    asterisk: \"asterisk\",\n    //\t*  relevant for some comment sytanx\n    at: \"at sign\",\n    //\t@  multiple uses in other coding languages including certain data types\n    equals: \"equals sign\",\n    //\t=\n    hash: \"hash\",\n    //\t#\n    percent: \"percent\",\n    //\t%\n    plus: \"plus\",\n    //\t+\n    minus: \"minus\",\n    //\t−\n    dash: \"dash\",\n    //\t−\n    hyphen: \"hyphen\",\n    //\t−\n    tilde: \"tilde\",\n    //\t~\n    underscore: \"underscore\",\n    //\t_\n    bar: \"vertical bar\" //\t|\n\n  },\n  types: {\n    key: \"key\",\n    value: \"value\",\n    number: \"number\",\n    string: \"string\",\n    primitive: \"primitive\",\n    boolean: \"boolean\",\n    character: \"character\",\n    integer: \"integer\",\n    array: \"array\",\n    float: \"float\" //... Reference: https://en.wikipedia.org/wiki/List_of_data_structures\n\n  },\n  invalidToken: {\n    tokenSequence: {\n      prohibited: \"'{firstToken}' token cannot be followed by '{secondToken}' token(s)\",\n      permitted: \"'{firstToken}' token can only be followed by '{secondToken}' token(s)\"\n    },\n    termSequence: {\n      prohibited: \"A {firstTerm} cannot be followed by a {secondTerm}\",\n      permitted: \"A {firstTerm} can only be followed by a {secondTerm}\"\n    },\n    double: \"'{token}' token cannot be followed by another '{token}' token\",\n    useInstead: \"'{badToken}' token is not accepted. Use '{goodToken}' instead\",\n    unexpected: \"Unexpected '{token}' token found\"\n  },\n  brace: {\n    curly: {\n      missingOpen: \"Missing '{' open curly brace\",\n      missingClose: \"Open '{' curly brace is missing closing '}' curly brace\",\n      cannotWrap: \"'{token}' token cannot be wrapped in '{}' curly braces\"\n    },\n    square: {\n      missingOpen: \"Missing '[' open square brace\",\n      missingClose: \"Open '[' square brace is missing closing ']' square brace\",\n      cannotWrap: \"'{token}' token cannot be wrapped in '[]' square braces\"\n    }\n  },\n  string: {\n    missingOpen: \"Missing/invalid opening string '{quote}' token\",\n    missingClose: \"Missing/invalid closing string '{quote}' token\",\n    mustBeWrappedByQuotes: \"Strings must be wrapped by quotes\",\n    nonAlphanumeric: \"Non-alphanumeric token '{token}' is not allowed outside string notation\",\n    unexpectedKey: \"Unexpected key found at string position\"\n  },\n  key: {\n    numberAndLetterMissingQuotes: \"Key beginning with number and containing letters must be wrapped by quotes\",\n    spaceMissingQuotes: \"Key containing space must be wrapped by quotes\",\n    unexpectedString: \"Unexpected string found at key position\"\n  },\n  noTrailingOrLeadingComma: \"Trailing or leading commas in arrays and objects are not permitted\"\n};\nexports[\"default\"] = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1qc29uLWVkaXRvci1hanJtL2xvY2FsZS9lbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTtBQUNmO0FBQ0EsWUFBWSxRQUFRLFNBQVMsS0FBSztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0EscUJBQXFCLFdBQVcsZ0NBQWdDLFlBQVk7QUFDNUUsb0JBQW9CLFdBQVcsa0NBQWtDLFlBQVk7QUFDN0UsS0FBSztBQUNMO0FBQ0Esc0JBQXNCLFdBQVcseUJBQXlCLFdBQVc7QUFDckUscUJBQXFCLFdBQVcsMkJBQTJCLFdBQVc7QUFDdEUsS0FBSztBQUNMLGVBQWUsTUFBTSx3Q0FBd0MsTUFBTTtBQUNuRSxtQkFBbUIsU0FBUywrQkFBK0IsVUFBVTtBQUNyRSw4QkFBOEIsTUFBTTtBQUNwQyxHQUFHO0FBQ0g7QUFDQTtBQUNBLDhCQUE4QjtBQUM5Qiw0QkFBNEIsbUNBQW1DO0FBQy9ELHFCQUFxQixNQUFNLGdDQUFnQztBQUMzRCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLE1BQU07QUFDM0I7QUFDQSxHQUFHO0FBQ0g7QUFDQSxtREFBbUQsTUFBTTtBQUN6RCxvREFBb0QsTUFBTTtBQUMxRDtBQUNBLCtDQUErQyxNQUFNO0FBQ3JEO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhY3QtanNvbi1lZGl0b3ItYWpybS9sb2NhbGUvZW4uanM/ZmI4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfZGVmYXVsdCA9IHtcbiAgZm9ybWF0OiBcIntyZWFzb259IGF0IGxpbmUge2xpbmV9XCIsXG4gIHN5bWJvbHM6IHtcbiAgICBjb2xvbjogXCJjb2xvblwiLFxuICAgIC8vIDpcbiAgICBjb21tYTogXCJjb21tYVwiLFxuICAgIC8vICwgINiMICDjgIFcbiAgICBzZW1pY29sb246IFwic2VtaWNvbG9uXCIsXG4gICAgLy8gO1xuICAgIHNsYXNoOiBcInNsYXNoXCIsXG4gICAgLy8gLyAgcmVsZXZhbnQgZm9yIGNvbW1lbnQgc3ludGF4IHN1cHBvcnRcbiAgICBiYWNrc2xhc2g6IFwiYmFja3NsYXNoXCIsXG4gICAgLy8gXFwgIHJlbGV2YW50IGZvciBlc2NhcGluZyBjaGFyYWN0ZXJcbiAgICBicmFja2V0czoge1xuICAgICAgcm91bmQ6IFwicm91bmQgYnJhY2tldHNcIixcbiAgICAgIC8vICggKVxuICAgICAgc3F1YXJlOiBcInNxdWFyZSBicmFja2V0c1wiLFxuICAgICAgLy8gWyBdXG4gICAgICBjdXJseTogXCJjdXJseSBicmFja2V0c1wiLFxuICAgICAgLy8geyB9XG4gICAgICBhbmdsZTogXCJhbmdsZSBicmFja2V0c1wiIC8vIDwgPlxuXG4gICAgfSxcbiAgICBwZXJpb2Q6IFwicGVyaW9kXCIsXG4gICAgLy8gLiBBbHNvIGtub3duIGFzIGZ1bGwgcG9pbnQsIGZ1bGwgc3RvcCwgb3IgZG90XG4gICAgcXVvdGVzOiB7XG4gICAgICBzaW5nbGU6IFwic2luZ2xlIHF1b3RlXCIsXG4gICAgICAvLyAnXG4gICAgICBkb3VibGU6IFwiZG91YmxlIHF1b3RlXCIsXG4gICAgICAvLyBcIlxuICAgICAgZ3JhdmU6IFwiZ3JhdmUgYWNjZW50XCIgLy8gYCB1c2VkIG9uIEphdmFzY3JpcHQgRVM2IFN5bnRheCBmb3IgU3RyaW5nIFRlbXBsYXRlc1xuXG4gICAgfSxcbiAgICBzcGFjZTogXCJzcGFjZVwiLFxuICAgIC8vICAg4oCCICDigINcbiAgICBhbXBlcnNhbmQ6IFwiYW1wZXJzYW5kXCIsXG4gICAgLy9cdCZcbiAgICBhc3RlcmlzazogXCJhc3Rlcmlza1wiLFxuICAgIC8vXHQqICByZWxldmFudCBmb3Igc29tZSBjb21tZW50IHN5dGFueFxuICAgIGF0OiBcImF0IHNpZ25cIixcbiAgICAvL1x0QCAgbXVsdGlwbGUgdXNlcyBpbiBvdGhlciBjb2RpbmcgbGFuZ3VhZ2VzIGluY2x1ZGluZyBjZXJ0YWluIGRhdGEgdHlwZXNcbiAgICBlcXVhbHM6IFwiZXF1YWxzIHNpZ25cIixcbiAgICAvL1x0PVxuICAgIGhhc2g6IFwiaGFzaFwiLFxuICAgIC8vXHQjXG4gICAgcGVyY2VudDogXCJwZXJjZW50XCIsXG4gICAgLy9cdCVcbiAgICBwbHVzOiBcInBsdXNcIixcbiAgICAvL1x0K1xuICAgIG1pbnVzOiBcIm1pbnVzXCIsXG4gICAgLy9cdOKIklxuICAgIGRhc2g6IFwiZGFzaFwiLFxuICAgIC8vXHTiiJJcbiAgICBoeXBoZW46IFwiaHlwaGVuXCIsXG4gICAgLy9cdOKIklxuICAgIHRpbGRlOiBcInRpbGRlXCIsXG4gICAgLy9cdH5cbiAgICB1bmRlcnNjb3JlOiBcInVuZGVyc2NvcmVcIixcbiAgICAvL1x0X1xuICAgIGJhcjogXCJ2ZXJ0aWNhbCBiYXJcIiAvL1x0fFxuXG4gIH0sXG4gIHR5cGVzOiB7XG4gICAga2V5OiBcImtleVwiLFxuICAgIHZhbHVlOiBcInZhbHVlXCIsXG4gICAgbnVtYmVyOiBcIm51bWJlclwiLFxuICAgIHN0cmluZzogXCJzdHJpbmdcIixcbiAgICBwcmltaXRpdmU6IFwicHJpbWl0aXZlXCIsXG4gICAgYm9vbGVhbjogXCJib29sZWFuXCIsXG4gICAgY2hhcmFjdGVyOiBcImNoYXJhY3RlclwiLFxuICAgIGludGVnZXI6IFwiaW50ZWdlclwiLFxuICAgIGFycmF5OiBcImFycmF5XCIsXG4gICAgZmxvYXQ6IFwiZmxvYXRcIiAvLy4uLiBSZWZlcmVuY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfZGF0YV9zdHJ1Y3R1cmVzXG5cbiAgfSxcbiAgaW52YWxpZFRva2VuOiB7XG4gICAgdG9rZW5TZXF1ZW5jZToge1xuICAgICAgcHJvaGliaXRlZDogXCIne2ZpcnN0VG9rZW59JyB0b2tlbiBjYW5ub3QgYmUgZm9sbG93ZWQgYnkgJ3tzZWNvbmRUb2tlbn0nIHRva2VuKHMpXCIsXG4gICAgICBwZXJtaXR0ZWQ6IFwiJ3tmaXJzdFRva2VufScgdG9rZW4gY2FuIG9ubHkgYmUgZm9sbG93ZWQgYnkgJ3tzZWNvbmRUb2tlbn0nIHRva2VuKHMpXCJcbiAgICB9LFxuICAgIHRlcm1TZXF1ZW5jZToge1xuICAgICAgcHJvaGliaXRlZDogXCJBIHtmaXJzdFRlcm19IGNhbm5vdCBiZSBmb2xsb3dlZCBieSBhIHtzZWNvbmRUZXJtfVwiLFxuICAgICAgcGVybWl0dGVkOiBcIkEge2ZpcnN0VGVybX0gY2FuIG9ubHkgYmUgZm9sbG93ZWQgYnkgYSB7c2Vjb25kVGVybX1cIlxuICAgIH0sXG4gICAgZG91YmxlOiBcIid7dG9rZW59JyB0b2tlbiBjYW5ub3QgYmUgZm9sbG93ZWQgYnkgYW5vdGhlciAne3Rva2VufScgdG9rZW5cIixcbiAgICB1c2VJbnN0ZWFkOiBcIid7YmFkVG9rZW59JyB0b2tlbiBpcyBub3QgYWNjZXB0ZWQuIFVzZSAne2dvb2RUb2tlbn0nIGluc3RlYWRcIixcbiAgICB1bmV4cGVjdGVkOiBcIlVuZXhwZWN0ZWQgJ3t0b2tlbn0nIHRva2VuIGZvdW5kXCJcbiAgfSxcbiAgYnJhY2U6IHtcbiAgICBjdXJseToge1xuICAgICAgbWlzc2luZ09wZW46IFwiTWlzc2luZyAneycgb3BlbiBjdXJseSBicmFjZVwiLFxuICAgICAgbWlzc2luZ0Nsb3NlOiBcIk9wZW4gJ3snIGN1cmx5IGJyYWNlIGlzIG1pc3NpbmcgY2xvc2luZyAnfScgY3VybHkgYnJhY2VcIixcbiAgICAgIGNhbm5vdFdyYXA6IFwiJ3t0b2tlbn0nIHRva2VuIGNhbm5vdCBiZSB3cmFwcGVkIGluICd7fScgY3VybHkgYnJhY2VzXCJcbiAgICB9LFxuICAgIHNxdWFyZToge1xuICAgICAgbWlzc2luZ09wZW46IFwiTWlzc2luZyAnWycgb3BlbiBzcXVhcmUgYnJhY2VcIixcbiAgICAgIG1pc3NpbmdDbG9zZTogXCJPcGVuICdbJyBzcXVhcmUgYnJhY2UgaXMgbWlzc2luZyBjbG9zaW5nICddJyBzcXVhcmUgYnJhY2VcIixcbiAgICAgIGNhbm5vdFdyYXA6IFwiJ3t0b2tlbn0nIHRva2VuIGNhbm5vdCBiZSB3cmFwcGVkIGluICdbXScgc3F1YXJlIGJyYWNlc1wiXG4gICAgfVxuICB9LFxuICBzdHJpbmc6IHtcbiAgICBtaXNzaW5nT3BlbjogXCJNaXNzaW5nL2ludmFsaWQgb3BlbmluZyBzdHJpbmcgJ3txdW90ZX0nIHRva2VuXCIsXG4gICAgbWlzc2luZ0Nsb3NlOiBcIk1pc3NpbmcvaW52YWxpZCBjbG9zaW5nIHN0cmluZyAne3F1b3RlfScgdG9rZW5cIixcbiAgICBtdXN0QmVXcmFwcGVkQnlRdW90ZXM6IFwiU3RyaW5ncyBtdXN0IGJlIHdyYXBwZWQgYnkgcXVvdGVzXCIsXG4gICAgbm9uQWxwaGFudW1lcmljOiBcIk5vbi1hbHBoYW51bWVyaWMgdG9rZW4gJ3t0b2tlbn0nIGlzIG5vdCBhbGxvd2VkIG91dHNpZGUgc3RyaW5nIG5vdGF0aW9uXCIsXG4gICAgdW5leHBlY3RlZEtleTogXCJVbmV4cGVjdGVkIGtleSBmb3VuZCBhdCBzdHJpbmcgcG9zaXRpb25cIlxuICB9LFxuICBrZXk6IHtcbiAgICBudW1iZXJBbmRMZXR0ZXJNaXNzaW5nUXVvdGVzOiBcIktleSBiZWdpbm5pbmcgd2l0aCBudW1iZXIgYW5kIGNvbnRhaW5pbmcgbGV0dGVycyBtdXN0IGJlIHdyYXBwZWQgYnkgcXVvdGVzXCIsXG4gICAgc3BhY2VNaXNzaW5nUXVvdGVzOiBcIktleSBjb250YWluaW5nIHNwYWNlIG11c3QgYmUgd3JhcHBlZCBieSBxdW90ZXNcIixcbiAgICB1bmV4cGVjdGVkU3RyaW5nOiBcIlVuZXhwZWN0ZWQgc3RyaW5nIGZvdW5kIGF0IGtleSBwb3NpdGlvblwiXG4gIH0sXG4gIG5vVHJhaWxpbmdPckxlYWRpbmdDb21tYTogXCJUcmFpbGluZyBvciBsZWFkaW5nIGNvbW1hcyBpbiBhcnJheXMgYW5kIG9iamVjdHMgYXJlIG5vdCBwZXJtaXR0ZWRcIlxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-json-editor-ajrm/locale/en.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _defineProperty; }\n/* harmony export */ });\n/* harmony import */ var _toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toPropertyKey.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js\");\n\nfunction _defineProperty(obj, key, value) {\n  key = (0,_toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErQztBQUNoQztBQUNmLFFBQVEsNkRBQWE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanM/OTdkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdG9Qcm9wZXJ0eUtleSBmcm9tIFwiLi90b1Byb3BlcnR5S2V5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/defineProperty.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/objectSpread.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/objectSpread.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _objectSpread; }\n/* harmony export */ });\n/* harmony import */ var _defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defineProperty.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? Object(arguments[i]) : {};\n    var ownKeys = Object.keys(source);\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n    ownKeys.forEach(function (key) {\n      (0,_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]);\n    });\n  }\n  return target;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUQ7QUFDbEM7QUFDZixrQkFBa0Isc0JBQXNCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE1BQU0sOERBQWM7QUFDcEIsS0FBSztBQUNMO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkLmpzPzViMzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IE9iamVjdChhcmd1bWVudHNbaV0pIDoge307XG4gICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3duS2V5cy5wdXNoLmFwcGx5KG93bktleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/objectSpread.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/toPrimitive.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _toPrimitive; }\n/* harmony export */ });\n/* harmony import */ var _typeof_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typeof.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/typeof.js\");\n\nfunction _toPrimitive(input, hint) {\n  if ((0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if ((0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b1ByaW1pdGl2ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrQztBQUNuQjtBQUNmLE1BQU0sc0RBQU87QUFDYjtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFPO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvUHJpbWl0aXZlLmpzPzQxY2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF90eXBlb2YgZnJvbSBcIi4vdHlwZW9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHtcbiAgaWYgKF90eXBlb2YoaW5wdXQpICE9PSBcIm9iamVjdFwiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChfdHlwZW9mKHJlcykgIT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpO1xuICB9XG4gIHJldHVybiAoaGludCA9PT0gXCJzdHJpbmdcIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _toPropertyKey; }\n/* harmony export */ });\n/* harmony import */ var _typeof_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typeof.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/typeof.js\");\n/* harmony import */ var _toPrimitive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toPrimitive.js */ \"(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js\");\n\n\nfunction _toPropertyKey(arg) {\n  var key = (0,_toPrimitive_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(arg, \"string\");\n  return (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(key) === \"symbol\" ? key : String(key);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b1Byb3BlcnR5S2V5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrQztBQUNTO0FBQzVCO0FBQ2YsWUFBWSwyREFBVztBQUN2QixTQUFTLHNEQUFPO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b1Byb3BlcnR5S2V5LmpzP2NjN2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF90eXBlb2YgZnJvbSBcIi4vdHlwZW9mLmpzXCI7XG5pbXBvcnQgdG9QcmltaXRpdmUgZnJvbSBcIi4vdG9QcmltaXRpdmUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykge1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoYXJnLCBcInN0cmluZ1wiKTtcbiAgcmV0dXJuIF90eXBlb2Yoa2V5KSA9PT0gXCJzeW1ib2xcIiA/IGtleSA6IFN0cmluZyhrZXkpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/typeof.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/typeof.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _typeof; }\n/* harmony export */ });\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzPzYzZDYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH0sIF90eXBlb2Yob2JqKTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@babel/runtime/helpers/esm/typeof.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fzhaojiale%2FLibrary%2FContainers%2Fcom.tencent.xinWeChat%2FData%2FLibrary%2FApplication%20Support%2Fcom.tencent.xinWeChat%2F2.0b4.0.9%2Fb065ac55dfa93c168bb482c8fdccd19e%2FMessage%2FMessageTemp%2F3cfd51035ae532f90f7e60bef55f8b76%2FFile%2Fdouyin-manage%2Fsrc%2Fapp%2Fpage.tsx&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);